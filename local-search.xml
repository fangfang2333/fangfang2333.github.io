<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>虚拟化技术基础</title>
    <link href="/2022/04/02/xxxx/"/>
    <url>/2022/04/02/xxxx/</url>
    
    <content type="html"><![CDATA[<h1 id="小猪猪的笔记3-4月"><a href="#小猪猪的笔记3-4月" class="headerlink" title="小猪猪的笔记3-4月"></a>小猪猪的笔记3-4月</h1><h1 id="虚拟化技术"><a href="#虚拟化技术" class="headerlink" title="虚拟化技术"></a>虚拟化技术</h1><h2 id="虚拟化技术课"><a href="#虚拟化技术课" class="headerlink" title="虚拟化技术课"></a>虚拟化技术课</h2><p><code>虚拟机模板</code>：由虚拟机转换成模板，按照客户需要的方式进行部署</p><p><code>虚拟机</code>：本质上就是运行上的实例，由计算存储网络组合而成</p><p>虚拟机模板和虚拟机的关系：</p><ul><li>虚拟机 转换成模板，本质上就是给虚拟机<strong>打一个标签</strong>（速度特别快）</li><li>模板转换回虚拟机同理</li></ul><p>根据模板部署虚拟机有以下两个场景：</p><ol><li>不安装tools的情况下：就是克隆虚拟机</li><li>安装tools后：可以给在部署的过程中更改类似主机名，更改sid等个性化操作</li></ol><p>！！切换视图至<code>虚拟机和模板</code>视图中可以看见所有的虚拟机和模板</p><h3 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h3><p><code>模板</code>：可以<em>克隆</em>、<em>转换成虚拟机</em>、<em>从该模板部署虚拟机</em>（不会删除模板，等于个性化操作）</p><p><code>虚拟机</code>：可以 <em>克隆为模板</em>（不会删除虚拟机），<em>转换成模板</em></p><p><img src="/2022/04/02/xxxx/%E6%9C%AA%E5%91%BD%E5%90%8D%E6%96%87%E4%BB%B6(1).jpg" alt="模板和虚拟机关系"></p><h3 id="虚拟机热迁移"><a href="#虚拟机热迁移" class="headerlink" title="虚拟机热迁移"></a>虚拟机热迁移</h3><p><code>热迁移</code>：将正在运行的实例从一台主机迁移到另外一台主机的过程，期间用户无感知，<strong>业务不中断</strong></p><p>虚拟机热迁移分为<code>存储热迁移（更改数据存储）</code>，<code>内存热迁移（更改主机模式）</code>，<code>无共享热迁移（主机和数据存储一起）</code></p><p><img src="/2022/04/02/xxxx/image-20220402140428926.png" alt="vcenten上三种热迁移方式"></p><h4 id="热迁移条件"><a href="#热迁移条件" class="headerlink" title="热迁移条件"></a>热迁移条件</h4><p><strong>虚拟机热迁移的条件：</strong>从 虚拟机自身，主机（计算 存储 网络 ） 这几方面来考虑</p><ul><li><p>虚拟机要正在运行，过程中不能对虚拟机进行重启，下电操作</p></li><li><p>目标主机必须要有充足的计算资源（cpu、内存）</p></li><li><p>目标主机不能处于<code>维护模式</code></p><ul><li><code>维护模式</code>：下电前或者对主机进行例行维护，需要将主机切换成维护模式，在上面的实例会自行牵走，且不能将实例热迁移进来</li></ul></li><li><p>要有相同的存储，源主机和目的主机都能够访问到存储（共享存储）</p></li><li><p>网络要互通，跨主机迁移需要有相同的dvs</p></li></ul><p>如果不满足以上某一项则无法完成热迁移：</p><p><img src="/2022/04/02/xxxx/image-20220402195709951.png" alt="不满足共享存储的需求"></p><p>出现以上情况，还需要进行热迁移的话，我们得：① 将虚拟机先迁移到共享存储上（更改数据存储），②再跨主机进行迁移（更改主机）</p><h4 id="热迁移过程"><a href="#热迁移过程" class="headerlink" title="热迁移过程"></a>热迁移过程</h4><p>默认情况下，我们讲的热迁移就是<strong>更改主机热迁移</strong>（内存热迁移）</p><p><code>初始内存</code>：在开始热迁移之前，虚拟机上面的内存</p><p><code>内存变更分片</code>：迁移过程中，由于虚拟机还在运行所产生的内存数据</p><p>在满足上述条件后，就可以开始热迁移了</p><p>① 源主机将待迁移虚拟机的规格（虚拟机<code>引导</code>）发送到目的主机上</p><p>② 目的主机就会创建规格一模一样的虚拟机</p><p>③ 将初始内存分片发送到目的主机上</p><p>④ 将内存变更分片发送到目的主机上，直到这个过程能够瞬间完成</p><p>⑤ 源主机暂停卸载存储，目的主机修改存储映射关系，并开机</p>]]></content>
    
    
    <categories>
      
      <category>虚拟化技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>虚拟化技术</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【红帽】红帽初中级笔记</title>
    <link href="/2022/03/26/rhel-rhcsa-ref/"/>
    <url>/2022/03/26/rhel-rhcsa-ref/</url>
    
    <content type="html"><![CDATA[<h1 id="Redhat"><a href="#Redhat" class="headerlink" title="Redhat"></a>Redhat</h1><h3 id="Understand-and-use-essential-tools"><a href="#Understand-and-use-essential-tools" class="headerlink" title="Understand and use essential tools"></a>Understand and use essential tools</h3><ol><li><p>Programmable completion for bash is provided in the bash-completion module. To install this module:</p> <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">sudo dnf install bash-completion<br></code></pre></div></td></tr></table></figure></li><li><p>Access a shell prompt and issue commands with correct syntax</p><ul><li>Common commands and their options, as well as vim usage, are shown below:<table><thead><tr><th>Command</th><th>Options</th><th>Description</th></tr></thead><tbody><tr><td>ls</td><td>-h (human readable) <br>  -a (show hidden) <br> -l (detailed) <br> -lt (newist file first) <br> -ltr (oldest file first)</td><td>List of files and directories</td></tr><tr><td>pwd</td><td></td><td>Print working directory</td></tr><tr><td>cd</td><td>~ (home) <br> &#x2F; (root) <br> - (switch) <br> .. (parent)</td><td>Change directories</td></tr><tr><td>who</td><td>whoami (show user)</td><td>Show logged in users</td></tr><tr><td>what</td><td>w (shorthand)</td><td>Show logged in users with more detail</td></tr><tr><td>uptime</td><td></td><td>Show system uptime</td></tr><tr><td>logname</td><td></td><td>Show real username (if using su)</td></tr><tr><td>id</td><td></td><td>Shows a user’s UID, username, GUID etc.</td></tr><tr><td>groups</td><td></td><td>Lists groups for users</td></tr><tr><td>last</td><td></td><td>List all user logins and system reboots</td></tr><tr><td>lastb</td><td></td><td>List all failed login attempts</td></tr><tr><td>lastlog</td><td></td><td>List recent logins</td></tr><tr><td>uname</td><td>-a (details)</td><td>System information</td></tr><tr><td>hostnamectl</td><td>set-hostname</td><td>View hostname</td></tr><tr><td>clear</td><td></td><td>Clear the screen</td></tr><tr><td>timedatectl</td><td>set-time <br> list-timezones <br> set-timezone <br></td><td>Display system time</td></tr><tr><td>date</td><td>–set</td><td>View system date</td></tr><tr><td>which</td><td></td><td>Show path to a command</td></tr><tr><td>wc</td><td></td><td>Word count</td></tr><tr><td>lspci</td><td>-m (legible)</td><td>PCI buses details</td></tr><tr><td>lsusb</td><td></td><td>USB buses details</td></tr><tr><td>lscpu</td><td></td><td>Processor details</td></tr><tr><td>gzip&#x2F;bzip2</td><td>-d (uncompress)</td><td>Compress files</td></tr><tr><td>gunzip&#x2F;bunzip2</td><td></td><td>Uncompress files</td></tr><tr><td>tar</td><td>-c (create) <br> -f (specifies name) <br> -v (verbose) <br> -r (append to existing) <br> -x (extract) <br> -z (compress with gzip) <br> -j (compress with bzip2)</td><td>Archive file</td></tr><tr><td>star</td><td></td><td>Enhanced tar</td></tr><tr><td>man</td><td>-k (keyword) <br> -f (short description)</td><td>Manual</td></tr><tr><td>mandb</td><td></td><td>Update the mandb</td></tr><tr><td>ssh</td><td>-l (as different user)</td><td>SSH to another Linux system</td></tr><tr><td>tty</td><td></td><td>Display terminal name</td></tr><tr><td>whatis</td><td></td><td>Search the command in the mandb for description</td></tr><tr><td>info</td><td></td><td>More detailed than man</td></tr><tr><td>apropos</td><td></td><td>Search the command in the mandb</td></tr><tr><td>grep</td><td>-n (show line numbers) <br> -v (pattern exclusion) <br> -i (case insensitive) <br> -E (use alternation) <br> -w (word match)</td><td>Find text</td></tr></tbody></table><table><thead><tr><th>Key</th><th>Description</th></tr></thead><tbody><tr><td>i</td><td>Change to insert mode</td></tr><tr><td>h, j, k, l</td><td>Move left, down, up, right</td></tr><tr><td>w, b, e, ge</td><td>Move word at a time</td></tr><tr><td>n[action]</td><td>Do n times</td></tr><tr><td>x</td><td>Remove a character</td></tr><tr><td>a</td><td>Append</td></tr><tr><td>f[char]</td><td>Move to next given char in line</td></tr><tr><td>F[char]</td><td>Move to previous char in line</td></tr><tr><td>; and ,</td><td>Repeat last f or F</td></tr><tr><td>&#x2F;yourtext and then: n, N</td><td>Search text</td></tr><tr><td>d[movement]</td><td>Delete by giving movement</td></tr><tr><td>r[char]</td><td>Replaces character below cursor</td></tr><tr><td>0, $</td><td>Move to start&#x2F;end of line</td></tr><tr><td>o, O</td><td>Add new line</td></tr><tr><td>%</td><td>Goto corresponding parentheses</td></tr><tr><td>ci[movement]</td><td>Change inside of given movement</td></tr><tr><td>D</td><td>Delete to end of line</td></tr><tr><td>S</td><td>Clear current line</td></tr><tr><td>gg &#x2F; G</td><td>Move to start &#x2F; end of buffer</td></tr><tr><td>yy</td><td>Copy current line</td></tr><tr><td>p</td><td>Paste copied text after cursor</td></tr></tbody></table></li></ul></li><li><p>Use input-output redirection (&gt;, &gt;&gt;, |, 2&gt;, etc.)</p><ul><li><p>The default locations for input, output, and error are referred to as standard input (stdin), standard output (stdout), and standard error (stderr).</p></li><li><p>Standard input redirection can be done to have a command read the required information from an alternative source, such as a file, instead of the keyboard. For example:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">cat &lt; /etc/cron.allow <br></code></pre></div></td></tr></table></figure></li><li><p>Standard output redirection sends the output generated by a command to an alternative destination, such as a file. For example:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">ll &gt; ll.out<br></code></pre></div></td></tr></table></figure></li><li><p>Standard error redirection sends the output generated by a command to an alternative destination, such as a file. For example: </p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">echo test 2&gt; outerr.out<br></code></pre></div></td></tr></table></figure></li><li><p>Instead of &gt; to create or overwrite, &gt;&gt; can be used to append to a file.</p></li><li><p>To redirect both stdout and stderror to a file:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">echo test &gt;&gt; result.txt 2&gt;&amp;1<br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>Use grep and regular expressions to analyse text</p><ul><li>The grep command is used to find text. For example:  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">grep user100 /etc/passwd<br></code></pre></div></td></tr></table></figure></li><li>Common regular expression parameters are shown below:<table><thead><tr><th>Symbol</th><th>Description</th></tr></thead><tbody><tr><td>^</td><td>Beginning of a line or word</td></tr><tr><td>$</td><td>End of a line or word</td></tr><tr><td>|</td><td>Or</td></tr><tr><td>.</td><td>Any character</td></tr><tr><td>*</td><td>Any number of any character</td></tr><tr><td>?</td><td>Exactly one character</td></tr><tr><td>[]</td><td>Range of characters</td></tr><tr><td>\</td><td>Escape character</td></tr><tr><td>‘’</td><td>Mask meaning of enclosed special characters</td></tr><tr><td>“”</td><td>Mask meaning of all enclosed special characters except , $ and ‘’</td></tr></tbody></table></li></ul></li><li><p>Access remote systems using SSH</p><ul><li><p>Secure Shell (SSH) provides a secure mechanism for data transmission between source and destination systems over IP networks.</p></li><li><p>SSH uses encryption and performs data integrity checks on transmitted data.</p></li><li><p>The version of SSH used is defined in <code>/etc/ssh/sshd_config</code>.</p></li><li><p>The most common authentication methods are Password-Based Authentication and Public&#x2F;Private Key-Based Authentication.</p></li><li><p>The command <em>ssh-keygen</em> is used to generate keys and place them in the .ssh directory, and the command <em>ssh-copy-id</em> is used to copy the public key file to your account on the remote server.</p></li><li><p>TCP Wrappers is a host-based mechanism that is used to limit access to wrappers-aware TCP services on the system by inbound clients. 2 files <code>/etc/hosts.allow</code> and <code>/etc/hosts.deny</code> are used to control access. The .allow file is referenced before the .deny file. The format of the files is &lt;name of service process&gt;:&lt;user@source&gt;.</p></li><li><p>All messages related to TCP Wrappers are logged to the <code>/var/log/secure</code> file.</p></li><li><p>To login using SSH: </p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">ssh user@host<br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>Log in and switch users in multiuser targets</p><ul><li><p>A user can switch to another user using the <em>su</em> command. The <em>-i</em> option ensures that the target users login scripts are run:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">sudo -i -u targetUser<br></code></pre></div></td></tr></table></figure></li><li><p>To run a command as root without switching:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">sudo -c<br></code></pre></div></td></tr></table></figure></li><li><p>The configuration for which users can run which commands using sudo is defined in the <code>/etc/sudoers</code> file. The visudo command is used to edit the sudoers file. The sudo command logs successful authentication and command data to <code>/var/log/secure</code>.</p></li></ul></li><li><p>Archive, compress, unpack, and decompress files using tar, star, gzip, and bzip2</p><ul><li><p>To archive using tar:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">tar cvf myTar.tar /home<br></code></pre></div></td></tr></table></figure></li><li><p>To unpack using tar:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">tar xvf myTar.tar<br></code></pre></div></td></tr></table></figure></li><li><p>To compress using tar and gzip:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">tar cvfz myTar.tar /home<br></code></pre></div></td></tr></table></figure></li><li><p>To compress using tar and bzip2:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">tar cvfj myTar.tar /home<br></code></pre></div></td></tr></table></figure></li><li><p>To decompress using tar and gzip:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">tar xvfz myTar.tar /home<br></code></pre></div></td></tr></table></figure></li><li><p>To decompress using tar and bzip2:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">tar xvfj myTar.tar /home<br></code></pre></div></td></tr></table></figure></li><li><p>The star command is an enhanced version of tar. It also supports SELinux security contexts and extended file attributes. The options are like tar.</p></li></ul></li><li><p>Create and edit text files</p><ul><li><p>To create an empty file:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">touch file<br>cat &gt; newfile<br></code></pre></div></td></tr></table></figure></li><li><p>To create a file using vim:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">vi file<br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>Create, delete, copy, and move files and directories</p><ul><li><p>To create a directory:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">mkdir directory<br></code></pre></div></td></tr></table></figure></li><li><p>To move a file or directory:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">mv item1 item2<br></code></pre></div></td></tr></table></figure></li><li><p>To copy a file or directory:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">cp item1 item2<br></code></pre></div></td></tr></table></figure></li><li><p>To remove a file:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">rm file1<br></code></pre></div></td></tr></table></figure></li><li><p>To remove an empty directory:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">rmdir directory<br></code></pre></div></td></tr></table></figure></li><li><p>To remove a non-empty directory:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">rm -r directory<br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>Create hard and soft links</p><ul><li><p>A soft link associates one file with another. If the original file is removed the soft link will point to nothing. To create a soft link to file1:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">ln -s file1 softlink<br></code></pre></div></td></tr></table></figure></li><li><p>A hard link associates multiple files to the same inode making them indistinguishable. If the original file is removed, you will still have access to the data through the linked file. To create a soft link to file1:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">ln file1 hardlink<br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>List, set, and change standard ugo&#x2F;rwx permissions</p><ul><li><p>Permissions are set for the user, group, and others. User is the owner of the file or the directory, group is a set of users with identical access defined in <code>/etc/group</code>, and others are all other users. The types of permission are read, write, and execute.</p></li><li><p>Permission combinations are shown below:</p><table><thead><tr><th>Octal Value</th><th>Binary Notation</th><th>Symbolic Notation</th><th>Explanation</th></tr></thead><tbody><tr><td>0</td><td>000</td><td>—</td><td>No permissions.</td></tr><tr><td>1</td><td>001</td><td>–x</td><td>Execute permission only.</td></tr><tr><td>2</td><td>010</td><td>-w-</td><td>Write permission only.</td></tr><tr><td>3</td><td>011</td><td>-wx</td><td>Write and execute permissions.</td></tr><tr><td>4</td><td>100</td><td>r–</td><td>Read permission only.</td></tr><tr><td>5</td><td>101</td><td>r-x</td><td>Read and execute permissions.</td></tr><tr><td>6</td><td>110</td><td>rw-</td><td>Read and write permissions.</td></tr><tr><td>7</td><td>111</td><td>rwx</td><td>Read, write, and execute permissions.</td></tr></tbody></table></li><li><p>To grant the owner, group, and others all permissions using the <em>chmod</em> command:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">chmod 777 file1<br></code></pre></div></td></tr></table></figure></li><li><p>The default permissions are calculated based on the umask. The default umask for root is 0022 and 0002 for regular users (the leading 0 has no significance). The pre-defined initial permissions are 666 for files and 777 for directories. The umask is subtracted from these initial permissions to obtain the default permissions. To change the default umask:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">umask 027<br></code></pre></div></td></tr></table></figure></li><li><p>Every file and directory has an owner. By default, the creator assumes ownership. The owner’s group is assigned to a file or directory. To change the ownership of a file or directory:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">useradd user100<br>chown user100 item1<br>chgrp user100 item1<br></code></pre></div></td></tr></table></figure>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">chown user100:user100 item1<br></code></pre></div></td></tr></table></figure></li><li><p>Note that the -R option must be used to recursively change all files in a directory.</p></li></ul></li><li><p>Locate, read, and use system documentation including man, info, and files in <code>/usr/share/doc</code></p><ul><li><p>The <em>man</em> command can be used to view help for a command. To search for a command based on a keyword the <em>apropros</em> command or <em>man</em> with the -k option can be used. The <em>mandb</em> command is used to build the man database.</p></li><li><p>To search for a command based on a keyword in occurring in its man page:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">man -K &lt;keyword&gt;<br></code></pre></div></td></tr></table></figure></li><li><p>The <em>whatis</em> command can be used to search for a command in the man database for a short description.</p></li><li><p>The <em>info</em> command provides more detailed information than the <em>man</em> command. </p></li><li><p>The <code>/usr/share/doc</code> directory contains documentation for all installed packages under sub-directories that match package names followed by their version.</p></li></ul></li></ol><h3 id="Create-simple-shell-scripts"><a href="#Create-simple-shell-scripts" class="headerlink" title="Create simple shell scripts"></a>Create simple shell scripts</h3><ol><li><p>Conditionally execute code (use of: if, test, [], etc.)</p><ul><li><p>An example using if and test statements is shown with <em>example.sh</em> below:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">contents of example.sh</span><br>      #####<br>      ##!/bin/bash<br><span class="hljs-meta prompt_">#</span><span class="language-bash">ping -c 1 <span class="hljs-variable">$1</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-keyword">if</span> <span class="hljs-built_in">test</span> <span class="hljs-string">&quot;$?&quot;</span> -eq <span class="hljs-string">&quot;0&quot;</span>; <span class="hljs-keyword">then</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$1</span> IP is reachable&quot;</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-keyword">else</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$1</span> IP is not reachable&quot;</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-keyword">fi</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-built_in">exit</span></span><br>      #####<br></code></pre></div></td></tr></table></figure></li><li><p>Input arguments can be passed in after the script name, with e.g. 1 being the first input argument. The <em>$?</em> term expands the exit status of the most recently executed command. When using <em>echo</em> the <em>-e</em> argument can be used to print characters such as new lines.</p></li><li><p>An example using a case statement is shown with <em>example.sh</em> below:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">contents of example.sh</span><br>      #####<br>      ##!/bin/bash<br><span class="hljs-meta prompt_">#</span><span class="language-bash">now=$(<span class="hljs-built_in">date</span> + <span class="hljs-string">&quot;%a&quot;</span>)</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-keyword">case</span> <span class="hljs-variable">$now</span> <span class="hljs-keyword">in</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">Mon)</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Full Backup&quot;</span>;</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">;;</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">Tue|Wed|Thu|Fri)</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Partial Backup&quot;</span>;</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">;;</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">Sat|Sun)</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;No Backup&quot;</span>;</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">;;</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">*);;</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-keyword">esac</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-built_in">exit</span></span><br>      #####<br></code></pre></div></td></tr></table></figure></li><li><p>An example using [] is shown with <em>example.sh</em> below:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">contents of example.sh</span><br>      #####<br>      ##!/bin/bash<br><span class="hljs-meta prompt_">#</span><span class="language-bash">ping -c 1 <span class="hljs-variable">$1</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-keyword">if</span> [<span class="hljs-string">&quot;$?&quot;</span> -eq <span class="hljs-string">&quot;0&quot;</span>]; <span class="hljs-keyword">then</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$1</span> IP is reachable&quot;</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-keyword">else</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$1</span> IP is not reachable&quot;</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-keyword">fi</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-built_in">exit</span></span><br>      #####<br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>Use Looping constructs (for, etc.) to process file, command line input</p><ul><li><p>An example of a for loop is shown with <em>example.sh</em> below:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">contents of example.sh</span><br>      #####<br>      ##!/bin/bash<br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-keyword">for</span> file <span class="hljs-keyword">in</span> ./*.<span class="hljs-built_in">log</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-keyword">do</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-built_in">mv</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;file&#125;</span>&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;file&#125;</span>&quot;</span>.txt</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-keyword">done</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-built_in">exit</span></span><br>      #####<br></code></pre></div></td></tr></table></figure></li><li><p>An example of a while loop is shown with <em>example.sh</em> below:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">contents of example.sh</span><br>      #####<br>      ##!/bin/bash<br><span class="hljs-meta prompt_">#</span><span class="language-bash">input = <span class="hljs-string">&quot;/home/kafka.log&quot;</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-keyword">while</span> IFS = <span class="hljs-built_in">read</span> -r line</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-keyword">do</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$line</span>&quot;</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-keyword">done</span> &lt; <span class="hljs-string">&quot;<span class="hljs-variable">$input</span>&quot;</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-built_in">exit</span></span><br>      #####<br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>Process script inputs ($1, $2, etc.)</p><ul><li>The first variable passed into a script can be accessed with <em>$1</em>.</li></ul></li><li><p>Processing output of shell commands within a script</p><ul><li>An example is shown with <em>example.sh</em> below:  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">contents of example.sh</span><br>      #####<br>      ##!/bin/bash<br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Hello World!&quot;</span> &gt;&gt; example-`<span class="hljs-built_in">date</span> +%Y%m%d-%H%M`.<span class="hljs-built_in">log</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-built_in">exit</span></span><br>      #####<br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>Processing shell command exit codes</p><ul><li>The <em>$?</em> term expands the exit status of the most recently executed command.</li></ul></li></ol><h3 id="Operate-running-systems"><a href="#Operate-running-systems" class="headerlink" title="Operate running systems"></a>Operate running systems</h3><ol><li><p>Boot, reboot, and shut down a system normally</p><ul><li><p>The RHEL boot process occurs when the system is powered up or reset and lasts until all enabled services are started and a login prompt appears at the screen. The login process consists of 4 steps:</p><ul><li><p>The firmware is the Basic Input Output System (BIOS) or Unified Extensible Firmware Interface (UEFI) code that is stored in flash memory on the motherboard. The first thing it does is run the power-on-self-test (POST) to initialise the system hardware components. It also installs appropriate drivers for the video hardware and displays system messages to the screen. It scans the available storage devices to locate a boot device (GRUB2 on RHEL), and then loads it into memory and passes control to it.</p></li><li><p>The boot loader presents a menu with a list of bootable kernels available on the system. After a pre-defined amount of time it boots the default kernel. GRUB2 searches for the kernel in the <code>/boot</code> file system. It then extracts the kernel code into memory and loads it based on the configuration in <code>/boot/grub2/grub.cfg</code>. Note that for UEFI systems, GRUB2 looks in <code>/boot/efi</code> instead and loads based on configuration in <code>/boot/efi/EFI/redhat/grub.efi</code>. Once the kernel is loaded, GRUB2 passes control to it.</p></li><li><p>The kernel loads the initial RAM disk (initrd) image from the <code>/boot</code> file system. This acts as a temporary file system. The kernel then loads necessary modules from initrd to allow access to the physical disks and the partitions and file systems within. It also loads any drivers required to support the boot process. Later, the kernel unmounts initrd and mounts the actual root file system.</p></li><li><p>The kernel continues the boot process. <em>systemd</em> is the default system initialisation scheme. It starts all enabled user space system and network services.</p></li></ul></li><li><p>The <em>shutdown</em> command is used to halt, power off, or reboot the system gracefully. This command broadcasts a warning message to all logged-in users, disables further user logins, waits for the specified time, and then stops the service and shuts to the system down to the specified target state. </p></li><li><p>To shut down the system now:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">shutdown -P now<br></code></pre></div></td></tr></table></figure></li><li><p>To halt the system now:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">shutdown -H now<br></code></pre></div></td></tr></table></figure></li><li><p>To reboot the system now:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">shutdown -r now<br></code></pre></div></td></tr></table></figure></li><li><p>To shut down the system after 5 minutes:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">shutdown -P 5<br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>Boot systems into different targets manually</p><ul><li><p><em>systemd</em> is the default system initialisation mechanism in RHEL 8. It is the first process that starts at boot and it is the last process that terminates at shutdown.</p></li><li><p><em>Units</em> are systemd objects that are used for organising boot and maintenance tasks, such as hardware initialisation, socket creation, file system mounts, and service start-ups. Unit configuration is stored in their respective configuration files, which are auto generated from other configurations, created dynamically from the system state, produced at runtime, or user developed. Units are in one of several operational states, including active, inactive, in the process of being activated or deactivated, and failed. Units can be enabled or disabled.</p></li><li><p>Units have a name and a type, which are encoded in files of the form unitname.type. Units can be viewed using the <em>systemctl</em> command. A target is a logical collection of units. They are a special systemd unit type with the .target file extension.</p></li><li><p><em>systemctl</em> is the primary command for interaction with systemd. </p></li><li><p>To boot into a custom target the <em>e</em> key can be pressed at the GRUB2 menu, and the desired target specified using systemd.unit. After editing press <em>ctrl+x</em> to boot into the target state. To boot into the emergency target: </p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">systemd.unit=emergency.target<br></code></pre></div></td></tr></table></figure></li><li><p>To boot into the rescue target:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">systemd.unit=rescue.target<br></code></pre></div></td></tr></table></figure></li><li><p>Run <em>systemctl reboot</em> after you are done to reboot the system.</p></li></ul></li><li><p>Interrupt the boot process in order to gain access to a system</p><ul><li><p>Press <em>e</em> at the GRUB2 menu and add “rd.break” in place of “ro crash”. This boot option tells the boot sequence to stop while the system is still using initramfs so that we can access the emergency shell.</p></li><li><p>Press <em>ctrl+x</em> to reboot.</p></li><li><p>Run the following command to remount the <code>/sysroot</code> directory with rw privileges:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">mount -o remount,rw /sysroot<br></code></pre></div></td></tr></table></figure></li><li><p>Run the following command to change the root directory to <code>/sysroot</code>:</p> <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">chroot /sysroot<br></code></pre></div></td></tr></table></figure></li><li><p>Run <em>passwd</em> command to change the root password.</p></li><li><p>Run the following commands to create an empty, hidden file to instruct the system to perform SELinux relabelling after the next boot:</p> <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">touch /.autorelabel<br>exit<br>exit<br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>Identify CPU&#x2F;memory intensive processes and kill processes</p><ul><li><p>A process is a unit for provisioning system resources. A process is created in memory in its own address space when a program, application, or command is initiated. Processes are organised in a hierarchical fashion. Each process has a parent process that spawns it and may have one or many child processes. Each process is assigned a unique identification number, known as the Process Identifier (PID). When a process completes its lifecycle or is terminated, this event is reported back to its parent process, and all the resources provisioned to it are then freed and the PID is removed. Processes spawned at system boot are called daemons. Many of these sit in memory and wait for an event to trigger a request to use their services.</p></li><li><p>There are 5 basic process states:</p><ul><li><p>Running: The process is being executed by the CPU.</p></li><li><p>Sleeping: The process is waiting for input from a user or another process.</p></li><li><p>Waiting: The process has received the input it was waiting for and is now ready to run when its turn arrives.</p></li><li><p>Stopped: The process is halted and will not run even when its turn arrives, unless a signal is sent to change its behaviour.</p></li><li><p>Zombie: The process is dead. Its entry is retained until the parent process permits it to die.</p></li></ul></li><li><p>The <em>ps</em> and <em>top</em> commands can be used to view running processes.</p></li><li><p>The <em>pidof</em> or <em>pgrep</em> commands can be used to view the PID associated with a process name.</p></li><li><p>The <em>ps</em> command can be used to view the processes associated with a particular user. An example is shown below:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">ps -U root<br></code></pre></div></td></tr></table></figure></li><li><p>To kill a process the <em>kill</em> or <em>pkill</em> commands can be used. Ordinary users can kill processes they own, while the <em>root</em> user can kill any process. The <em>kill</em> command requires a PID and the <em>pkill</em> command requires a process name. An example is shown below:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">pkill crond<br>kill `pidof crond`<br></code></pre></div></td></tr></table></figure></li><li><p>The list of signals accessible by <em>kill</em> can be seen by passing the <em>-l</em> option. The default signal is SIGTERM which signals for a process to terminate in an orderly fashion.</p></li><li><p>To use the SIGKILL signal:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">pkill -9 crond<br>kill -9 `pgrep crond`<br></code></pre></div></td></tr></table></figure></li><li><p>The <em>killall</em> command can be used to terminate all processes that match a specified criterion.</p></li></ul></li><li><p>Adjust process scheduling</p><ul><li><p>The priority of a process ranges from -20 (highest) to +19 (lowest). A higher niceness lowers the execution priority of a process and a lower niceness increases it. A child process inherits the niceness of its parent process.</p></li><li><p>To run a command with a lower (+2) priority:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">nice -2 top<br></code></pre></div></td></tr></table></figure></li><li><p>To run a command with a higher (-2) priority:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">nice --2 top<br></code></pre></div></td></tr></table></figure></li><li><p>To renice a running process:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">renice 5 1919<br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>Manage tuning profiles</p><ul><li><p>Tuned is a service which monitors the system and optimises the performance of the system for different use cases. There are pre-defined tuned profiles available in the <code>/usr/lib/tuned</code> directory. New profiles are created in the <code>/etc/tuned</code> directory. The <em>tuned-adm</em> command allows you to interact with the Tuned service.</p></li><li><p>To install and start the tuned service:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">yum install tuned<br>systemctl enable --now tuned<br></code></pre></div></td></tr></table></figure></li><li><p>To check the currently active profile:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">tuned-adm active<br></code></pre></div></td></tr></table></figure></li><li><p>To check the recommended profile:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">tuned-adm recommend<br></code></pre></div></td></tr></table></figure></li><li><p>To change the active profile:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">tuned-adm profile &lt;profile-name&gt;<br></code></pre></div></td></tr></table></figure></li><li><p>To create a customised profile and set it as active:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">mkdir /etc/tuned/&lt;profile-name&gt;<br>vi /etc/tuned/&lt;profile-name&gt;/&lt;profile-name.conf&gt;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">customise as required</span><br>tuned-adm profile &lt;profile-name&gt;<br>systmctl restart tuned.service<br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>Locate and interpret system log files and journals</p><ul><li><p>In RHEL logs capture messages generated by the kernel, daemons, commands, user activities, applications, and other events. The daemon that is responsible for system logging is called <em>rsyslogd</em>. The configuration file for <em>rsyslogd</em> is in the <code>/etc/rsyslog.conf</code> file. As defined in this configuration file, the default repository for most logs is the <code>/var/log</code> directory.</p></li><li><p>The below commands can be used to start and stop the daemon:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">systemctl stop rsyslog<br>systemctl start rsyslog<br></code></pre></div></td></tr></table></figure></li><li><p>A script called <em>logrotate</em> in <code>/etc/cron.daily</code> invokes the <em>logrotate</em> command to rotate log files as per the configuration file.</p></li><li><p>The boot log file is available at <code>/var/log/boot.log</code> and contains logs generated during system start-up. The system log file is available in <code>/var/log/messages</code> and is the default location for storing most system activities.</p></li></ul></li><li><p>Preserve system journals</p><ul><li><p>In addition to system logging, the <em>journald</em> daemon (which is an element of <em>systemd</em>) also collects and manages log messages from the kernel and daemon processes. It also captures system logs and RAM disk messages, and any alerts generated during the early boot stage. It stores these messages in binary format in files called <em>journals</em> in the <code>/var/run/journal</code> directory. These files are structured and indexed for faster and easier searches and can be viewed and managed using the <em>journalctl</em> command.</p></li><li><p>By default, journals are stored temporarily in the <code>/run/log/journal</code> directory. This is a memory-based virtual file system and does not persist across reboots. To have journal files stored persistently in <code>/var/log/journal</code> the following commands can be run:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">mkdir -p /var/log/journal<br>systemctl restart systemd-journald<br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>Start, stop, and check the status of network services</p><ul><li><p>The <em>sshd</em> daemon manages ssh connections to the server. To check the status of this service:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">systemctl is-active sshd        <br>systemctl status sshd<br></code></pre></div></td></tr></table></figure></li><li><p>To start and stop this service:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">systemctl start sshd<br>systemctl stop sshd<br></code></pre></div></td></tr></table></figure></li><li><p>To enable or disable this service:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">systemctl enable sshd<br>systemctl disable sshd<br></code></pre></div></td></tr></table></figure></li><li><p>To completely disable the service (i.e. to avoid loading the service at all):</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">systemctl mask sshd<br>systemctl unmask sshd<br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>Securely transfer files between systems</p><ul><li><p>To transfer a file using the Secure Copy Protocol (SCP):</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">scp &lt;file&gt; &lt;user&gt;@&lt;ip&gt;:&lt;file&gt;<br></code></pre></div></td></tr></table></figure></li><li><p>To transfer a directory:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">scp /etc/ssh/* &lt;user&gt;@&lt;ip&gt;:/tmp<br></code></pre></div></td></tr></table></figure></li><li><p>The direction of transfer can also be reversed:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">scp &lt;user&gt;@&lt;ip&gt;:/tmp/sshd_config sshd_config_external<br></code></pre></div></td></tr></table></figure></li></ul></li></ol><h3 id="Configure-local-storage"><a href="#Configure-local-storage" class="headerlink" title="Configure local storage"></a>Configure local storage</h3><ol><li><p>List, create, delete partitions on MBR and GPT disks</p><ul><li><p>Data is stored on disk drives that are logically divided into partitions. A partition can exist on a portion of a disk, an entire disk, or across multiple disks. Each partition can contain a file system, raw data space, swap space, or dump space.</p></li><li><p>A disk in RHEL can be divided into several partitions. This partition information is stored on the disk in a small region, which is read by the operating system at boot time. This is known as the Master Boot Record (MBR) on BIOS-based systems, and GUID Partition Table (GPT) on UEFI-based systems. At system boot, the BIOS&#x2F;UEFI scans all storage devices, detects the presence of MBR&#x2F;GPT, identifies the boot disks, loads the boot loader program in memory from the default boot disk, executes the boot code to read the partition table and identify the <code>/boot</code> partition, and continues with the boot process by loading the kernel in the memory and passing control over to it.</p></li><li><p>MBR allows the creation of only up to 4 primary partitions on a single disk, with the option of using one of the 4 partitions as an extended partition to hold an arbitrary number of logical partitions. MBR also lacks addressing space beyond 2TB due to its 32-bit nature and the disk sector size of 512-byte that it uses. MBR is also non-redundant, so a system becomes unbootable if it becomes corrupted somehow.</p></li><li><p>GPT is a newer 64-bit partitioning standard developed and integrated to UEFI firmware. GPT allows for 128 partitions, use of disks much larger than 2TB, and redundant locations for the storage of partition information. GPT also allows a BIOS-based system to boot from a GPT disk, using the boot loader program stored in a protective MBR at the first disk sector.</p></li><li><p>To list the mount points, size, and available space:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">df -h<br></code></pre></div></td></tr></table></figure></li><li><p>In RHEL block devices are an abstraction for certain hardware, such hard disks. The <em>blkid</em> command lists all block devices. The <em>lsblk</em> command lists more details about block devices.</p></li><li><p>To list all disks and partitions:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">fdisk -l # MBR<br>gdisk -l # GPT<br></code></pre></div></td></tr></table></figure></li><li><p>For MBR based partitions the <em>fdisk</em> utility can be used to create and delete partitions. To make a change to a disk:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">fdisk &lt;disk&gt;<br></code></pre></div></td></tr></table></figure></li><li><p>For GPT based partitions the <em>gdisk</em> utility can be used to create and delete partitions. To make a change to a disk:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">gdisk &lt;disk&gt;<br></code></pre></div></td></tr></table></figure></li><li><p>To inform the OS of partition table changes:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">partprobe<br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>Create and remove physical volumes</p><ul><li><p>Logical Volume Manager (LVM) is used to provide an abstraction layer between the physical storage and the file system. This enables the file system to be resized, to span across multiple physical disks, use random disk space, etc. One or more partitions or disks (physical volumes) can form a logical container (volume group), which is then divided into logical partitions (called logical volumes). These are further divided into physical extents (PEs) and logical extents (LEs).</p></li><li><p>A physical volume (PV) is created when a block storage device is brought under LVM control after going through the initialisation process. This process constructs LVM data structures on the device, including a label on the second sector and metadata information. The label includes a UUID, device size, and pointers to the locations of data and metadata areas.</p></li><li><p>A volume group (VG) is created when at least one physical volume is added to it. The space from all physical volumes in a volume group is aggregated to form one large pool of storage, which is then used to build one or more logical volumes. LVM writes metadata information for the volume group on each physical volume that is added to it.</p></li><li><p>To view physical volumes:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">pvs<br></code></pre></div></td></tr></table></figure></li><li><p>To view physical volumes with additional details:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">pvdisplay<br></code></pre></div></td></tr></table></figure></li><li><p>To initialise a disk or partition for use by LVM:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">pvcreate &lt;disk&gt;<br></code></pre></div></td></tr></table></figure></li><li><p>To remove a physical volume from a disk:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">pvremove &lt;disk&gt;<br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>Assign physical volumes to volume groups</p><ul><li><p>To view volume groups:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">vgs<br></code></pre></div></td></tr></table></figure></li><li><p>To view volume groups with additional details:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">vgdisplay<br></code></pre></div></td></tr></table></figure></li><li><p>To create a volume group:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">vgcreate &lt;name&gt; &lt;disk&gt;<br></code></pre></div></td></tr></table></figure></li><li><p>To extend an existing volume group:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">vgextend &lt;name&gt; &lt;disk&gt;<br></code></pre></div></td></tr></table></figure></li><li><p>To remove a disk from a volume group:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">vgreduce &lt;name&gt; &lt;disk&gt;<br></code></pre></div></td></tr></table></figure></li><li><p>To remove the last disk from a volume group:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">vgremove &lt;name&gt; &lt;disk&gt;<br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>Create and delete logical volumes</p><ul><li><p>To view logical volumes:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">lvs<br></code></pre></div></td></tr></table></figure></li><li><p>To view logical volumes with additional details:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">lvdisplay<br></code></pre></div></td></tr></table></figure></li><li><p>To create a logical volume in vg1 named lv1 and with 4GB of space:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">lvcreate -L 4G -n lv1 vg1 <br></code></pre></div></td></tr></table></figure></li><li><p>To extend the logical volume by 1GB:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">lvextend -L+1G &lt;lvpath&gt;<br></code></pre></div></td></tr></table></figure></li><li><p>To extend the logical volume by 1GB:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">lvextend -L+1G &lt;lvpath&gt;<br></code></pre></div></td></tr></table></figure></li><li><p>To reduce the size for a logical volume by 1GB:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">lvreduce -L-1G &lt;lvpath&gt;<br></code></pre></div></td></tr></table></figure></li><li><p>To remove a logical volume:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">umount &lt;mountpoint&gt;<br>lvremove &lt;lvpath&gt;<br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>Configure systems to mount file systems at boot by Universally Unique ID (UUID) or label</p><ul><li><p>The <code>/etc/fstab</code> file is a system configuration file that lists all available disks, disk partitions and their options. Each file system is described on a separate line. The <code>/etc/fstab</code> file is used by the <em>mount</em> command, which reads the file to determine which options should be used when mounting the specific device. A file system can be added to this file so that it is mounted on boot automatically.</p></li><li><p>The <em>e2label</em> command can be used to change the label on ext file systems. This can then be used instead of the UUID.</p></li></ul></li><li><p>Add new partitions and logical volumes, and swap to a system non-destructively</p><ul><li><p>Virtual memory is equal to RAM plus swap space. A swap partition is a standard disk partition that is designated as swap space by the <em>mkswap</em> command. A file can also be used as swap space but that is not recommended.</p></li><li><p>To create a swap:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">mkswap &lt;device&gt;<br></code></pre></div></td></tr></table></figure></li><li><p>To enable a swap:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">swapon &lt;device&gt;<br></code></pre></div></td></tr></table></figure></li><li><p>To check the status of swaps:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">swapon -s<br></code></pre></div></td></tr></table></figure></li><li><p>To disable a swap:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">swapoff &lt;device&gt;<br></code></pre></div></td></tr></table></figure></li><li><p>The <code>/etc/fstab</code> file will need a new entry for the swap so that it is created persistently.</p></li></ul></li></ol><h3 id="Create-and-configure-file-systems"><a href="#Create-and-configure-file-systems" class="headerlink" title="Create and configure file systems"></a>Create and configure file systems</h3><ol><li><p>Create, mount, unmount, and use vfat, ext4, and xfs file systems</p><ul><li><p>A file system is a logical container that is used to store files and directories. Each file system must be connected to the root of the directory hierarchy to be accessible. This is typically done automatically on system boot but can be done manually as well. Each file system can be mounted or unmounted using the UUID associated with it or by using a label that can be assigned to it. Mounting is the process of attaching an additional filesystem, which resides on a CDROM, Hard Disk Drive (HDD) or other storage device, to the currently accessible filesystem of a computer. </p></li><li><p>Each file system is created in a separate partition or logical volume. A typical RHEL system has numerous file systems. During OS installation, the <code>/</code> and <code>/boot</code> file systems are created by default. Typical additional file systems created during installation include <code>/home</code>, <code>/opt</code>, <code>/tmp</code>, <code>/usr</code> and <code>/var</code>.</p></li><li><p>File systems supported in RHEL are categorised as disk-based, network-based, and memory-based. Disk-based and network-based file systems are stored persistently, while data in memory-based systems is lost at system reboot. The different file systems are shown below:</p></li></ul><table><thead><tr><th>File System</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>ext2</td><td>Disk</td><td>The second generation of the extended file system. The first generation is no longer supported. ext2 is deprecated in RHEL and will be removed in a future RHEL release.</td></tr><tr><td>ext3</td><td>Disk</td><td>The third generation of the extended file system. It supports metadata journaling for faster recovery, superior reliability, file systems up to 16TB, files up to 2TB, and up to 32,000 sub-directories. ext3 writes each metadata update in its entirety to the journal after it has been completed. The system looks in the file system journal following a reboot after a system crash has occurred, and recovers the file system rapidly using the updated structural information stored in its journal.</td></tr><tr><td>ext4</td><td>Disk</td><td>The fourth generation of the extended file system. It supports file systems up to 1EB, files up to 16TB, an unlimited number of sub-directories, metadata and quota journaling, and extended user attributes.</td></tr><tr><td>xfs</td><td>Disk</td><td>XFS is a highly scalable and high-performance 64-bit file system.  It supports metadata journaling for faster crash recovery, online defragmentation, expansion quota journaling, and extended user attributes. It supports file systems and files of sizes up to 8EB. It is the default file system in RHEL 8.</td></tr><tr><td>btrfs</td><td>Disk</td><td>B-tree file system that supports a system size of 50TB. It supports more files, larger files, and larger volumes than ext4 and supports snapshotting and compression capabilities.</td></tr><tr><td>vfat</td><td>Disk</td><td>This is used for post-Windows 95 file system format on hard disks, USB drives, and floppy disks.</td></tr><tr><td>iso9660</td><td>Disk</td><td>This is used for CD&#x2F;DVD-based optical file systems.</td></tr><tr><td>BIOS Boot</td><td>Disk</td><td>A very small partition required for booting a device with a GUID partition table (GPT) on a BIOS system.</td></tr><tr><td>EFI System Partition</td><td>Disk</td><td>A small partition required for booting a device with a GUID partition table (GPT) on a UEFI system.</td></tr><tr><td>NFS</td><td>Network</td><td>A directory or file system shared over the network for access by other Linux systems.</td></tr><tr><td>AutoFS</td><td>Network</td><td>An NFS file system set to mount and unmount automatically on a remote system.</td></tr><tr><td>CIFS</td><td>Network</td><td>Common Internet File System (aka Samba). A directory or file system shared over the network for access by Windows and other Linux systems.</td></tr></tbody></table><ul><li><p>The <em>mount</em> command is used to attach a file system to a desired point in the directory hierarchy to make it accessible to users and applications. This point is referred to as the <em>mount point</em>, which is essentially an empty directory created solely for this point. The <em>mount</em> command requires the absolute pathname (or its UUID or label) to the block device containing the file system, and a mount point name to attach it to the directory tree. The <em>mount</em> command adds an entry to the <code>/proc/mounts</code> file and instructs the kernel to add the entry to the <code>/proc/mounts</code> file as well after a file system has been successfully mounted.</p></li><li><p>The opposite of the <em>mount</em> command is <em>unmount</em>, which is used to detach a file system from the directory hierarchy and make it inaccessible to users and applications.</p></li><li><p>To create a vfat file system:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">mkfs.vfat &lt;path&gt;<br></code></pre></div></td></tr></table></figure></li><li><p>To mount a vfat file system:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">mount &lt;path&gt; /mnt<br></code></pre></div></td></tr></table></figure></li><li><p>To unmount a vfat file system:</p> <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">umount &lt;path&gt; /mnt<br></code></pre></div></td></tr></table></figure></li><li><p>To check a vfat file system:</p> <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">fsck.vfat &lt;path&gt;<br></code></pre></div></td></tr></table></figure></li><li><p>To create an ext4 file system:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">mkfs.ext4 &lt;path&gt;<br></code></pre></div></td></tr></table></figure></li><li><p>To mount an ext4 file system:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">mount &lt;path&gt; /mnt<br></code></pre></div></td></tr></table></figure></li><li><p>To unmount an ext4 file system:</p> <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">umount &lt;path&gt; /mnt<br></code></pre></div></td></tr></table></figure></li><li><p>To check an ext4 file system:</p> <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">fsck &lt;path&gt;<br></code></pre></div></td></tr></table></figure></li><li><p>To get additional details about an ext4 file system:</p> <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">dumpe2fs &lt;path&gt;<br></code></pre></div></td></tr></table></figure></li><li><p>To create a xfs file system:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">mkfs.xfs &lt;path&gt;<br></code></pre></div></td></tr></table></figure></li><li><p>To mount a xfs file system:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">mount &lt;path&gt; /mnt<br></code></pre></div></td></tr></table></figure></li><li><p>To unmount a xfs file system:</p> <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">umount &lt;path&gt; /mnt<br></code></pre></div></td></tr></table></figure></li><li><p>To check a xfs file system:</p> <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">xfs_repair &lt;path&gt;<br></code></pre></div></td></tr></table></figure></li><li><p>To get additional details about an xfs file system:</p> <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">xfs_info &lt;path&gt;<br></code></pre></div></td></tr></table></figure></li><li><p>The path is the device name or a regular file that shall contain the file system.</p></li></ul></li><li><p>Mount and unmount network file systems using NFS</p><ul><li><p>To confirm nfs-utils is installed:</p> <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">dnf install nfs-utils<br></code></pre></div></td></tr></table></figure></li><li><p>To mount the network file system:</p> <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">mount -t nfs 10.0.2.5:/home/nfs-share /mnt<br></code></pre></div></td></tr></table></figure></li><li><p>Alternatively the following can be run after adding the entry to <code>/etc/fstab</code>:</p> <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">mount -a <br></code></pre></div></td></tr></table></figure></li><li><p>Using AutoFS with NFS:</p> <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">on the server</span><br>      systemctl status <br>mkdir /common<br>echo &quot;/common *(rw)&quot; &gt;&gt; /etc/exports<br>systemctl restart nfs-server.service<br>    <br><span class="hljs-meta prompt_"># </span><span class="language-bash">on the client</span><br>dnf install autofs -y<br>mkdir /autodir<br>vi /etc/auto.master<br><span class="hljs-meta prompt_"># </span><span class="language-bash">add line</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">/- /etc/auto.master.d/auto.dir</span><br>vi /etc/auto.master.d/auto.dir<br><span class="hljs-meta prompt_"># </span><span class="language-bash">add line</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">/autodir 172.25.1.4:/common</span><br>systemctl restart autofs &amp; systemctl enable autofs<br>    <br><span class="hljs-meta prompt_"># </span><span class="language-bash">on the server</span><br>touch /common/test<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">on the client</span><br>ls /autodir # confirm test file is created<br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>Extend existing logical volumes</p><ul><li><p>To extend the logical volume size by 2GB:</p> <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">lvextend -L+2G /dev/vg1/lv1<br>lvdisplay # confirm changes<br></code></pre></div></td></tr></table></figure></li><li><p>To extend the file system:</p> <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">df -Th # confirm file system type<br>resize2fs /dev/vg1/lvl1 # for ext3 or ext4<br>xfs_growfs /mnt # for xfs<br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>Create and configure set-GID directories for collaboration</p><ul><li><p>SUID (meaning set user id) is used to specify that a user can run an executable file with effective permissions of the file owner.  This is primarily used to elevate the privileges of the current user. When a user executes the file, the operating system will execute as the file owner. Instead of the normal <em>x</em> which represents execute permissions, an <em>s</em> will be visible. To set the SUID:</p> <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">chmod u+s &lt;filename&gt;<br></code></pre></div></td></tr></table></figure></li><li><p>SGID (meaning set group id) is used to specify that a user can run an executable file with effective permissions of the owning group.  When a user executes the file, the operating system will execute as the owning group. Instead of the normal x which represents execute permissions, an s will be visible. To set the SGID:</p> <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">chmod g+s &lt;filename&gt;<br></code></pre></div></td></tr></table></figure></li><li><p>To create a group and shared directory:</p> <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">groupadd accounts<br>mkdir -p /home/shared/accounts<br>chown nobody:accounts /home/shared/accounts<br>chmod g+s /home/shared/accounts<br>chmod 070 /home/shared/accounts<br></code></pre></div></td></tr></table></figure></li><li><p>When using SGID on a directory all files that are created in the directory will be owned by the group of the directory as opposed to the group of the owner.</p></li><li><p>If the sticky bit is set on a directory, the files in that directory can only be removed by the owner. A typical use case is for the <code>/tmp</code> directory. It can be written to by any user, but other users cannot delete the files of others. To set the sticky bit:</p> <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">chmod +t &lt;directory&gt;<br></code></pre></div></td></tr></table></figure></li><li><p>The SUID, SGID and sticky bit can also be set with number notation. The standard number (rwx) is prepended with 4 for SUID, 2 for SGID, and 1 for the sticky bit.</p></li><li><p>To remove special permissions the <em>-</em> flag is used instead of the <em>+</em> flag.</p></li></ul></li><li><p>Configure disk compression</p><ul><li><p>The Virtual Data Optimiser (VDO) provides data reduction in the form of deduplication, compression, and thin provisioning.</p></li><li><p>To install vdo:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">dnf install vdo kmod-kvdo<br></code></pre></div></td></tr></table></figure></li><li><p>To create the vdo:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">vdo create --name=vdo1 --device=/dev/sdb --vdoLogicalSize=30G --writePolicy=async<br></code></pre></div></td></tr></table></figure></li><li><p>To create and mount the file system:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">mkfs.xfs /dev/mapper/vdo1<br>mount /dev/mapper/vdo1 /mnt<br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>Manage layered storage</p><ul><li><p>Stratis is a storage management solution introduced in RHEL 8 that allows the configuration of advanced storage features such as pool-based management, thin provisioning, file system snapshots and monitoring.</p></li><li><p>To install stratis:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">dnf install stratisd stratis-cli<br>systemctl start stratisd<br></code></pre></div></td></tr></table></figure></li><li><p>To confirm there is no file system on the disk to be used:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">lsblk<br>blkid -p /dev/sdb<br></code></pre></div></td></tr></table></figure></li><li><p>If there is a file system remove it using:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">wipefs -a /dev/sdb<br></code></pre></div></td></tr></table></figure></li><li><p>To create a stratis pool and confirm:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">stratis pool create strat1 /dev/sdb<br>stratis pool list<br></code></pre></div></td></tr></table></figure></li><li><p>To create a file system and confirm:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">stratis fs create strat1 fs1<br>stratis fs list<br></code></pre></div></td></tr></table></figure></li><li><p>To mount the file system and confirm:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">mount /stratis/strat1/fs1 /mnt<br>df -h<br><span class="hljs-meta prompt_"># </span><span class="language-bash">add to /etc/fstab to make it persistent</span><br></code></pre></div></td></tr></table></figure></li><li><p>To add a disk to the stratis pool and confirm:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">stratis pool add-data strat1 /dev/sdc<br>stratis pool list<br></code></pre></div></td></tr></table></figure></li><li><p>To create a snapshot and confirm:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">stratis fs snapshot strat1 fs1 snapshot1<br>stratis filesystem list strat1<br></code></pre></div></td></tr></table></figure></li><li><p>To mount a snapshot:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">unmount /stratis/strat1/fs1<br>mount /stratis/strat1/snapshot1 /mnt<br></code></pre></div></td></tr></table></figure></li><li><p>To destroy a snapshot and confirm:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">unmount /stratis/strat1/snapshot1<br>stratis filesystem destroy strat1 snapshot1<br>stratis filesystem list<br></code></pre></div></td></tr></table></figure></li><li><p>To remove a stratis filesystem and pool and confirm:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">stratis filesystem destroy strat1 fs1<br>stratis filesystem list<br>stratis pool destroy strat1<br>stratis pool list<br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>Diagnose and correct file permission problems</p><ul><li>File permissions can be modified using <em>chmod</em> and <em>setfacl</em>.</li></ul></li></ol><h3 id="Deploy-configure-and-maintain-systems"><a href="#Deploy-configure-and-maintain-systems" class="headerlink" title="Deploy, configure, and maintain systems"></a>Deploy, configure, and maintain systems</h3><ol><li><p>Schedule tasks using at and cron</p><ul><li><p>Job scheduling and execution is handled by the <em>atd</em> and <em>crond</em> daemons. While <em>atd</em> manages jobs scheduled to run once in the future, <em>crond</em> is responsible for running jobs repetitively at pre-specified times. At start-up, <em>crond</em> reads schedules in files located in the <code>/var/spool/cron</code> and <code>/etc/cron.d</code> directories, and loads them in memory for later execution.</p></li><li><p>There are 4 files that control permissions for setting scheduled jobs. These are <em>at.allow</em>, <em>at.deny</em>, <em>cron.allow</em> and <em>cron.deny</em>. These files are in the <code>/etc</code> directory. The syntax of the files is identical, with each file taking 1 username per line. If no files exist, then no users are permitted. By default, the <em>deny</em> files exist and are empty, and the <em>allow</em> files do not exist. This opens up full access to using both tools for all users.</p></li><li><p>All activities involving <em>atd</em> and <em>crond</em> are logged to the <code>/var/log/cron</code> file.</p></li><li><p>The <em>at</em> command is used to schedule one-time execution of a program by the <em>atd</em> daemon. All submitted jobs are stored in the <code>/var/spool/at</code> directory.</p></li><li><p>To schedule a job using <em>at</em> the below syntax is used:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">at 11:30pm 6/30/15<br></code></pre></div></td></tr></table></figure></li><li><p>The commands to execute are defined in the terminal, press <em>ctrl+d</em> when finished. The added job can be viewed with <em>at</em> and can be removed with the <em>-d</em> option.</p></li><li><p>A shell script can also be provided:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">at -f ~/script1.sh 11:30pm 6/30/15<br></code></pre></div></td></tr></table></figure></li><li><p>The <code>/etc/crontab</code> file has the following columns:</p><ul><li>1: Minutes of hour (0-59), with multiple comma separated values, or * to represent every minute.</li><li>2: Hours of day (0-23), with multiple comma separated values, or * to represent every hour.</li><li>3: Days of month (1-31), with multiple comma separated values, or * to represent every day.</li><li>4: Month of year (1-12, jan-dec), with multiple comma separated values, or * to represent every month.</li><li>5: Day of week (0-6, sun-sat), with multiple comma separated values, or * to represent every day.</li><li>6: Full path name of the command or script to be executed, along with any arguments.</li></ul></li><li><p>Step values can be used with *&#x2F;2 meaning every 2nd minute.</p></li><li><p>The <em>crontab</em> command can be used to edit the file. Common options are <em>e</em> (edit), <em>l</em> (view), <em>r</em> (remove):</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">crontab -e<br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>Start and stop services and configure services to start automatically at boot</p><ul><li><p>To check the status of a service:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">systemctl status &lt;service&gt;<br></code></pre></div></td></tr></table></figure></li><li><p>To start a service:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">systemctl start &lt;service&gt;<br></code></pre></div></td></tr></table></figure></li><li><p>To stop a service:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">systemctl stop &lt;service&gt;<br></code></pre></div></td></tr></table></figure></li><li><p>To make a service reload its configuration:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">systemctl reload &lt;service&gt;<br></code></pre></div></td></tr></table></figure></li><li><p>To make a service reload its configuration or restart if it can’t reload:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">systemctl reload-or-restart &lt;service&gt;<br></code></pre></div></td></tr></table></figure></li><li><p>To make a service start on boot:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">systemctl enable &lt;service&gt;<br></code></pre></div></td></tr></table></figure></li><li><p>To stop a service starting on boot:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">systemctl disable &lt;service&gt;<br></code></pre></div></td></tr></table></figure></li><li><p>To check if a service is enabled:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">systemctl is-enabled &lt;service&gt;<br></code></pre></div></td></tr></table></figure></li><li><p>To check if a service has failed:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">systemctl is-failed &lt;service&gt;<br></code></pre></div></td></tr></table></figure></li><li><p>To view the configuration file for a service:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">systemctl cat /usr/lib/sysdtemd/system/&lt;service&gt;<br></code></pre></div></td></tr></table></figure></li><li><p>To view the dependencies for a service:</p>   <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">systemctl list-dependencies &lt;service&gt;<br></code></pre></div></td></tr></table></figure></li><li><p>To stop a service from being run by anyone but the system and from being started on boot:</p>   <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">systemctl mask &lt;service&gt;<br></code></pre></div></td></tr></table></figure></li><li><p>To remove a mask:</p>   <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">systemctl unmask &lt;service&gt;<br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>Configure systems to boot into a specific target automatically</p><ul><li><p>To get the default target:</p>   <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">systemctl get-default<br></code></pre></div></td></tr></table></figure></li><li><p>To list available targets:</p>   <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">systemctl list-units --type target --all<br></code></pre></div></td></tr></table></figure></li><li><p>To change the default target:</p>   <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">systemctl set-default &lt;target&gt;<br></code></pre></div></td></tr></table></figure></li><li><p>The change will take affect after a reboot.</p></li></ul></li><li><p>Configure time service clients</p><ul><li><p>To print the date:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">date +%d%m%y-%H%M%S<br></code></pre></div></td></tr></table></figure></li><li><p>To set the system clock as per the hardware clock:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">hwclock -s<br></code></pre></div></td></tr></table></figure></li><li><p>To set the hardware clock as per the system clock:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">hwclock -w<br></code></pre></div></td></tr></table></figure></li><li><p>The <em>timedatectl</em> command can also be used to view the date and time.</p></li><li><p>To change the date or time:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">timedatectl set-time 2020-03-18<br>timedatectl set-time 22:43:00<br></code></pre></div></td></tr></table></figure></li><li><p>To view a list of time zones:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">timedatectl list-timezones<br></code></pre></div></td></tr></table></figure></li><li><p>To change the time zone:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">timedatectl set-timezone &lt;timezone&gt;<br></code></pre></div></td></tr></table></figure></li><li><p>To enable NTP:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">timedatectl set-ntp yes<br></code></pre></div></td></tr></table></figure></li><li><p>To start the <em>chronyd</em> service:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">systemctl start chronyd<br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>Install and update software packages from Red Hat Network, a remote repository, or from the local file system</p><ul><li><p>The .rpm extension is a format for files that are manipulated by the Redhat Package Manager (RPM) package management system. RHEL 8 provides tools for the installation and administration of RPM packages. A package is a group of files organised in a directory structure and metadata that makes up a software application.</p></li><li><p>An RPM package name follows the below format:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">openssl-1.0.1e-34.el7.x86_64.rpm<br><span class="hljs-meta prompt_"># </span><span class="language-bash">package name = openssl</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">package version = 1.0.1e</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">package release = 34</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">RHEL version = el7</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">processor architecture = x86_64</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">extension = .rpm</span><br></code></pre></div></td></tr></table></figure></li><li><p>The <em>subscription-manager</em> command can be used to link a Red Hat subscription to a system.</p></li><li><p>The <em>dnf</em> command is the front-end to <em>rpm</em> and is the preferred tool for package management. The <em>yum</em> command has been superseded by <em>dnf</em> in RHEL 8. It requires that the system has access to a software repository. The primary benefit of <em>dnf</em> is that it automatically resolves dependencies by downloading and installing any additional required packages.</p></li><li><p>To list enabled and disabled repositories:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">dnf repolist all<br>dnf repoinfo<br></code></pre></div></td></tr></table></figure></li><li><p>To search for a package:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">dnf search &lt;package&gt;<br>dnf list &lt;package&gt;<br></code></pre></div></td></tr></table></figure></li><li><p>To view more information about a particular package:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">dnf info &lt;package&gt;<br></code></pre></div></td></tr></table></figure></li><li><p>To install a package:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">dnf install &lt;package&gt;<br></code></pre></div></td></tr></table></figure></li><li><p>To remove a package:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">dnf remove &lt;package&gt;<br></code></pre></div></td></tr></table></figure></li><li><p>To find a package from a file:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">dnf provides &lt;path&gt;<br></code></pre></div></td></tr></table></figure></li><li><p>To install a package locally:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">dnf localinstall &lt;path&gt;<br></code></pre></div></td></tr></table></figure></li><li><p>To view available groups:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">dnf groups list<br></code></pre></div></td></tr></table></figure></li><li><p>To install a group (e.g. System Tools):</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">dnf group &quot;System Tools&quot;<br></code></pre></div></td></tr></table></figure></li><li><p>To remove a group (e.g. System Tools):</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">dnf group remove &quot;System Tools&quot;<br></code></pre></div></td></tr></table></figure></li><li><p>To see the history of installations using <em>dnf</em>:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">dnf history list<br></code></pre></div></td></tr></table></figure></li><li><p>To undo a particular installation (e.g. ID&#x3D;22):</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">dnf history undo 22<br></code></pre></div></td></tr></table></figure></li><li><p>To redo a particular installation (e.g. ID&#x3D;22):</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">dnf history redo 22<br></code></pre></div></td></tr></table></figure></li><li><p>To add a repository using the dnf config manager:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">dnf config-manager --add-repo &lt;url&gt;<br></code></pre></div></td></tr></table></figure></li><li><p>To enable a repository using the dnf config manager:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">dnf config-manager --enablerepo &lt;repository&gt;<br></code></pre></div></td></tr></table></figure></li><li><p>To disable a repository using the dnf config manager:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">dnf config-manager --disablerepo &lt;repository&gt;<br></code></pre></div></td></tr></table></figure></li><li><p>To create a repository:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">dnf install createrepo<br>mkdir &lt;path&gt;<br>createrepo --&lt;name&gt; &lt;path&gt;<br>yum-config-manager --add-repo file://&lt;path&gt;<br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>Work with package module streams</p><ul><li><p>RHEL 8 introduced the concept of Application Streams. Components made available as Application Streams can be packaged as modules or RPM packages and are delivered through the AppStream repository in RHEL 8. Module streams represent versions of the Application Stream components. Only one module stream can be active at a particular time, but it allows multiple different versions to be available in the same dnf repository.</p></li><li><p>To view modules:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">dnf module list<br></code></pre></div></td></tr></table></figure></li><li><p>To get information about a module: </p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">dnf module info --profile &lt;module-name&gt;<br></code></pre></div></td></tr></table></figure></li><li><p>To install a module: </p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">dnf module install &lt;module-name&gt;<br></code></pre></div></td></tr></table></figure></li><li><p>To remove a module: </p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">dnf module remove &lt;module-name&gt;<br></code></pre></div></td></tr></table></figure></li><li><p>To reset a module after removing it: </p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">dnf module reset &lt;module-name&gt;<br></code></pre></div></td></tr></table></figure></li><li><p>To be specific about the module installation:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">dnf module install &lt;module-name&gt;:&lt;version&gt;/&lt;profile&gt;<br></code></pre></div></td></tr></table></figure></li><li><p>To check the version of a module:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">&lt;module-name&gt; -v<br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>Modify the system bootloader</p><ul><li><p>The GRUB2 configuration can be edited directly on the boot screen. The configuration can also be edited using the command line.</p></li><li><p>To view the grub2 commands: </p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">grub2<br></code></pre></div></td></tr></table></figure></li><li><p>To make a change to the configuration: </p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">vi /etc/default/grub<br><span class="hljs-meta prompt_"># </span><span class="language-bash">Change a value</span><br>grub2-mkconfig -o /boot/grub2/grub.cfg<br><span class="hljs-meta prompt_"># </span><span class="language-bash">View changes</span><br>vi /boot/grub2/grub.cfg<br></code></pre></div></td></tr></table></figure></li></ul></li></ol><h3 id="Manage-basic-networking"><a href="#Manage-basic-networking" class="headerlink" title="Manage basic networking"></a>Manage basic networking</h3><ol><li><p>Configure IPv4 and IPv6 addresses</p><ul><li><p>The format of an IPv4 address is a set of 4 8-bit integers that gives a 32-bit IP address.  The format of an IPv6 is a set of 8 16-bit hexadecimal numbers that gives a 128-bit IP address.</p></li><li><p>The <em>nmcli</em> command is used to configure networking using the NetworkManager service. This command is used to create, display, edit, delete, activate, and deactivate network connections. Each network device corresponds to a Network Manager device.</p></li><li><p>Using nmcli with the connection option lists the available connection profiles in NetworkManager.</p></li><li><p>The <em>ip</em> command can also be used for network configuration. The main difference between ip and nmcli is that changes made with the ip command are not persistent.</p></li><li><p>To view system IP addresses:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">ip addr<br></code></pre></div></td></tr></table></figure></li><li><p>To show the current connections:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">nmcli connection show<br></code></pre></div></td></tr></table></figure></li><li><p>Using nmcli with the device option lists the available network devices in the system.</p></li><li><p>To view the current network device status and details:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">nmcli device status<br>nmcli device show<br></code></pre></div></td></tr></table></figure></li><li><p>To add an ethernet IPv4 connection:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">nmcli connection add con-name &lt;name&gt; ifname &lt;name&gt; type ethernet ip4 &lt;address&gt; gw4 &lt;address&gt;<br></code></pre></div></td></tr></table></figure></li><li><p>To manually modify a connection:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">nmcli connection modify &lt;name&gt; ipv4.addresses &lt;address&gt;<br>nmcli connection modify &lt;name&gt; ipv4.method manual<br></code></pre></div></td></tr></table></figure></li><li><p>To delete a connection:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">nmcli connection delete &lt;name&gt;<br></code></pre></div></td></tr></table></figure></li><li><p>To activate a connection:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">nmcli connection up &lt;name&gt;<br></code></pre></div></td></tr></table></figure></li><li><p>To deactivate a connection:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">nmcli connection down &lt;name&gt;<br></code></pre></div></td></tr></table></figure></li><li><p>To check the DNS servers that are being used:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">cat /etc/resolv.conf<br></code></pre></div></td></tr></table></figure></li><li><p>To change the DNS server being used:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">nmcli con mod &lt;name&gt; ipv4.dns &lt;dns&gt;<br>systemctl restart NetworkManager.service<br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>Configure hostname resolution</p><ul><li><p>To lookup the IP address based on a host name the <em>host</em> or <em>nslookup</em> commands can be used.</p></li><li><p>The <code>/etc/hosts</code> file is like a local DNS. The <code>/etc/nsswitch.conf</code> file controls the order that resources are checked for resolution. </p></li><li><p>To lookup the hostname:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">hostname -s # short<br>hostname -f # fully qualified domain name<br></code></pre></div></td></tr></table></figure></li><li><p>The hostname file is in <code>/etc/hostname</code>. To refresh any changes run the <em>hostnamectl</em> command.</p></li></ul></li><li><p>Configure network services to start automatically at boot</p><ul><li><p>To install a service and make it start automatically at boot:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">dnf install httpd<br>systemctl enable httpd<br></code></pre></div></td></tr></table></figure></li><li><p>To set a connection to be enabled on boot:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">nmcli connection modify eth0 connection.autoconnect yes<br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>Restrict network access using firewall-cmd&#x2F;firewall</p><ul><li><p>Netfilter is a framework provided by the Linux kernel that provides functions for packet filtering. In RHEL 7 and earlier iptables was the default way of configuring Netfilter. Disadvantages of ipables were that a separate version (ip6tables) was required for ipv6, and that the user interface is not very user friendly.</p></li><li><p>The default firewall system in RHEL 8 is <em>firewalld</em>. Firewalld is a zone-based firewall. Each zone can be associated with one or more network interfaces, and each zone can be configured to accept or deny services and ports. The <em>firewall-cmd</em> command is the command line client for firewalld.</p></li><li><p>To check firewall zones:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">firewall-cmd --get-zones<br></code></pre></div></td></tr></table></figure></li><li><p>To list configuration for a zone:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">firewall-cmd --zone work --list-all<br></code></pre></div></td></tr></table></figure></li><li><p>To create a new zone:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">firewall-cmd --new-zone servers --permanent<br></code></pre></div></td></tr></table></figure></li><li><p>To reload firewall-cmd configuration:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">firewall-cmd --reload<br></code></pre></div></td></tr></table></figure></li><li><p>To add a service to a zone:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">firewall-cmd --zone servers --add-service=ssh --permanent<br></code></pre></div></td></tr></table></figure></li><li><p>To add an interface to a zone:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">firewall-cmd --change-interface=enp0s8 --zone=servers --permanent<br></code></pre></div></td></tr></table></figure></li><li><p>To get active zones:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">firewall-cmd --get-active-zones<br></code></pre></div></td></tr></table></figure></li><li><p>To set a default zone:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">firewall-cmd --set-default-zone=servers<br></code></pre></div></td></tr></table></figure></li><li><p>To check the services allowed for a zone:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">firewall-cmd --get-services<br></code></pre></div></td></tr></table></figure></li><li><p>To add a port to a zone:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">firewall-cmd --add-port 8080/tcp --permanent --zone servers<br></code></pre></div></td></tr></table></figure></li><li><p>To remove a service from a zone:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">firewall-cmd --remove-service https --permanent --zone servers<br></code></pre></div></td></tr></table></figure></li><li><p>To remove a port from a zone:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">firewall-cmd --remove-port 8080/tcp --permanent --zone servers<br></code></pre></div></td></tr></table></figure></li></ul></li></ol><h3 id="Manage-users-and-groups"><a href="#Manage-users-and-groups" class="headerlink" title="Manage users and groups"></a>Manage users and groups</h3><ol><li><p>Create, delete, and modify local user accounts</p><ul><li><p>RHEL 8 supports three user account types: root, normal and service. The root user has full access to all services and administrative functions. A normal user can run applications and programs that they are authorised to execute. Service accounts are responsible for taking care of the installed services.</p></li><li><p>The <code>/etc/passwd</code> file contains vital user login data.</p></li><li><p>The <code>/etc/shadow</code> file is readable only by the root user and contains user authentication information. Each row in the file corresponds to one entry in the passwd file. The password expiry settings are defined in the <code>/etc/login.defs</code> file. The <code>/etc/defaults/useradd</code> file contains defaults for the <em>useradd</em> command.</p></li><li><p>The <code>/etc/group</code> file contains the group information. Each row in the file stores one group entry.</p></li><li><p>The <code>/etc/gshadow</code> file stores encrypted group passwords. Each row in the file corresponds to one entry in the group file.</p></li><li><p>Due to manual modification, inconsistencies may arise between the above four authentication files. The <em>pwck</em> command is used to check for inconsistencies.</p></li><li><p>The <em>vipw</em> and <em>vigr</em> commands are used to modify the <em>passwd</em> and <em>group</em> files, respectively. These commands disable write access to these files while the privileged user is making the modifications.</p></li><li><p>To create a user:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">useradd user1<br></code></pre></div></td></tr></table></figure></li><li><p>To check that the user has been created:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">cat /etc/group | grep user1<br></code></pre></div></td></tr></table></figure></li><li><p>To specify the UID and GID at user creation:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">useradd -u 1010 -g 1005 user1<br></code></pre></div></td></tr></table></figure></li><li><p>To create a user and add them to a group:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">useradd -G IT user2<br></code></pre></div></td></tr></table></figure></li><li><p>Note that <em>-G</em> is a secondary group, and <em>-g</em> is the primary group. The primary group is the group that the operating system assigns to files to which a user belongs. A secondary group is one or more other groups to which a user also belongs. </p></li><li><p>To delete a user:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">userdel user1<br></code></pre></div></td></tr></table></figure></li><li><p>To modify a user:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">usermod -l user5 user1 # note that home directory will remain as user1<br></code></pre></div></td></tr></table></figure></li><li><p>To add a user but not give access to the shell:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">useradd -s /sbin/nologin user<br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>Change passwords and adjust password aging for local user accounts</p><ul><li><p>To change the password for a user:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">passwd user1<br></code></pre></div></td></tr></table></figure></li><li><p>To step through password aging information the <em>chage</em> command can be used without any options.</p></li><li><p>To view user password expiry information:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">chage -l user1<br></code></pre></div></td></tr></table></figure></li><li><p>To set the password expiry for a user 30 days from now:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">chage -M 30 user1<br></code></pre></div></td></tr></table></figure></li><li><p>To set the password expiry date:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">chage -E 2021-01-01 user1<br></code></pre></div></td></tr></table></figure></li><li><p>To set the password to never expire:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">chage -E -1 user1<br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>Create, delete, and modify local groups and group memberships</p><ul><li><p>To create a group:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">groupadd IT<br></code></pre></div></td></tr></table></figure></li><li><p>To create a group with a specific GID:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">groupadd -g 3032<br></code></pre></div></td></tr></table></figure></li><li><p>To delete a group:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">groupdel IT<br></code></pre></div></td></tr></table></figure></li><li><p>To modify the name of a group:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">groupmod -n IT-Support IT<br></code></pre></div></td></tr></table></figure></li><li><p>To modify the GID of a group:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">groupmod -g 3033 IT-Support<br></code></pre></div></td></tr></table></figure></li><li><p>To add a user to a group:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">groupmod -aG IT-Support user1<br></code></pre></div></td></tr></table></figure></li><li><p>To view the members of a group:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">groupmems -l -g IT-Support<br></code></pre></div></td></tr></table></figure></li><li><p>To remove a user from a group:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">gpasswd -d user1 IT-Support<br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>Configure superuser access</p><ul><li><p>To view the sudoers file:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">visudo /etc/sudoers<br></code></pre></div></td></tr></table></figure></li><li><p>Members of the wheel group can use sudo on all commands. To add a user to the wheel group:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">sudo usermod -aG wheel user1<br></code></pre></div></td></tr></table></figure></li><li><p>To allow an individual user sudo access to specific commands:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">visudo /etc/sudoers<br>user2 ALL=(root) /bin/ls, /bin/df -h, /bin/date<br></code></pre></div></td></tr></table></figure></li></ul></li></ol><h3 id="Manage-security"><a href="#Manage-security" class="headerlink" title="Manage security"></a>Manage security</h3><ol><li><p>Configure firewall settings using firewall-cmd&#x2F;firewalld</p><ul><li><p>Network settings such as masquerading and IP forwarding can also be configured in the firewall-config GUI application. To install this application:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">dnf install firewall-config<br></code></pre></div></td></tr></table></figure></li><li><p>To set port forwarding in the kernel setting:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">vi /etc/sysctl.conf<br><span class="hljs-meta prompt_"># </span><span class="language-bash">add line</span><br>net.ipv4.ip_forward=1<br><span class="hljs-meta prompt_"># </span><span class="language-bash">save file</span><br>sysctl -p<br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>Create and use file access control lists</p><ul><li><p>To give a user read and write access to a file using an access control list:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">setfacl -m u:user1:rw- testFile<br>getfacl testFile<br></code></pre></div></td></tr></table></figure></li><li><p>To restrict a user from accessing a file using an access control list:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">setfacl -m u:user1:000 testFile<br>getfacl testFile<br></code></pre></div></td></tr></table></figure></li><li><p>To remove an access control list for a user:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">setfacl -x u:user1 testFile<br>getfacl testFile<br></code></pre></div></td></tr></table></figure></li><li><p>To give a group read and execute access to a directory recursively using an access control list:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">setfacl -R -m g:IT-Support:r-x testDirectory<br>getfacl testFile<br></code></pre></div></td></tr></table></figure></li><li><p>To remove an access control list for a group:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">setfacl -x g:IT-Support testDirectory<br>getfacl testFile<br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>Configure key-based authentication for SSH</p><ul><li><p>To generate an id_rsa and id_rsa.pub files:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">ssh-keygen<br></code></pre></div></td></tr></table></figure></li><li><p>To enable ssh for a user:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">touch authorized_keys<br>echo &quot;publicKey&quot; &gt; /home/new_user/.ssh/authorized_keys<br></code></pre></div></td></tr></table></figure></li><li><p>To copy the public key from server1 to server2:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">ssh-copy-id -i ~/.ssh/id_rsa.pub server2<br>cat ~/.ssh/known_hosts # validate from server1<br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>Set enforcing and permissive modes for SELinux</p><ul><li><p>Security Enhanced Linux (SELinux) is an implementation of Mandatory Access Control (MAC) architecture developed by the U.S National Security Agency (NSA). MAC provides an added layer of protection beyond the standard Linux Discretionary Access Control (DAC), which includes the traditional file and directory permissions, ACL settings, setuid&#x2F;setgid bit settings, su&#x2F;sudo privileges etc.</p></li><li><p>MAC controls are fine-grained; they protect other services in the event one of the services is negotiated. MAC uses a set of defined authorisation rules called policy to examine security attributes associated with subjects and objects when a subject tries to access an object and decides whether to permit this access attempt. SELinux decisions are stored in a special cache referred to as Access Vector Cache (AVC).</p></li><li><p>When an application or process makes a request to access an object, SELinux checks with the AVC, where permissions are cached for subjects and objects. If a decision is unable to be made, it sends the request to the security server. The security server checks for the security context of the app or process and the object. Security context is applied from the SELinux policy database. </p></li><li><p>To check the SELinux status:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">getenforce<br>sestatus<br></code></pre></div></td></tr></table></figure></li><li><p>To put SELinux into permissive mode modify the <code>/etc/selinux/config</code> file as per the below and reboot:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">SELINUX=permissive<br></code></pre></div></td></tr></table></figure></li><li><p>Messages logged from SELinux are available in <code>/var/log/messages</code>.</p></li></ul></li><li><p>List and identify SELinux file and process context</p><ul><li><p>To view the SELinux contexts for files:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">ls -Z<br></code></pre></div></td></tr></table></figure></li><li><p>To view the contexts for a user:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">id -Z<br></code></pre></div></td></tr></table></figure></li><li><p>The contexts shown follow the user:role:type:level syntax. The SELinux user is mapped to a Linux user using the SELinux policy. The role is an intermediary between domains and SELinux users. The type defines a domain for processes, and a type for files. The level is used for Multi-Category Security (MCS) and Multi-Level Security (MLS).</p></li><li><p>To view the processes for a user:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">ps -Z # ps -Zaux to see additional information<br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>Restore default file contexts</p><ul><li><p>To view the SELinux contexts for files:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">chcon unconfined:u:object_r:tmp_t:s0<br></code></pre></div></td></tr></table></figure></li><li><p>To restore the SELinux contexts for a file:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">restorecon file.txt<br></code></pre></div></td></tr></table></figure></li><li><p>To restore the SELinux contexts recursively for a directory:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">restorecon -R directory<br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>Use Boolean settings to modify system SELinux settings</p><ul><li><p>SELinux has many contexts and policies already defined. Booleans within SELinux allow common rules to be turned on and off.</p></li><li><p>To check a SELinux Boolean setting:  </p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">getsebool -a | grep virtualbox<br></code></pre></div></td></tr></table></figure></li><li><p>To set a SELinux Boolean setting permanently:  </p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">setsebool -P use_virtualbox on<br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>Diagnose and address routine SELinux policy violations</p><ul><li><p>The SELinux Administration tool is a graphical tool that enables many configuration and management operations to be performed. To install and run the tool:</p> <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">yum install setools-gui<br>yum install policycoreutils-gui<br>system-config-selinux<br></code></pre></div></td></tr></table></figure></li><li><p>SELinux alerts are written to <code>/var/log/audit/audit.log</code> if the <em>auditd</em> daemon is running, or to the <code>/var/log/messages</code> file via the <em>rsyslog</em> daemon in the absence of <em>auditd</em>.</p></li><li><p>A GUI called the SELinux Troubleshooter can be accessed using the <em>sealert</em> command. This allows SELinux denial messages to be analysed and provides recommendations on how to fix issues.</p></li></ul></li></ol><h3 id="Manage-containers"><a href="#Manage-containers" class="headerlink" title="Manage containers"></a>Manage containers</h3><ol><li><p>Find and retrieve container images from a remote registry</p><ul><li><p>A container is used for running multiple isolated applications on the same hardware. Unlike a virtual machine, containers share the host systems operating system. This is more lightweight but a little less flexible.</p></li><li><p>Podman is a container engine developed by Redhat. Podman is an alternative to the well-known container engine Docker. It is used to directly manage pods and container images. The Podman Command Line Interface (CLI) uses the same commands as the Docker CLI. Docker is not officially supported in RHEL 8.</p></li><li><p>To search for an image in a remote repository and download it:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">dnf install podman -y<br>podman search httpd # note that docker.io/library/httpd has 3000+ stars<br>podman pull docker.io/library/httpd<br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>Inspect container images</p><ul><li><p>To view images after they have been downloaded:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">podman images<br></code></pre></div></td></tr></table></figure></li><li><p>To inspect an image using Podman:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">podman inspect -l # -l gets the latest container<br></code></pre></div></td></tr></table></figure></li><li><p>To inspect an image in a remote registry using Skopeo:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">      dnf install skopeo -y<br>skopeo inspect docker://registry.fedoraproject.org/fedora:latest<br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>Perform container management using commands such as podman and skopeo</p><ul><li><p>The man page for Podman and bash-completion can be used to provide more details on the usage of Podman.</p></li><li><p>To view the logs for a container:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">podman logs -l<br></code></pre></div></td></tr></table></figure></li><li><p>To view the pids for a container:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">podman top -l<br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>Perform basic container management such as running, starting, stopping, and listing running containers</p><ul><li>To start, stop and remove a container:  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">podman run -dt -p 8080:80/tcp docker.io/library/httpd # redirect requests on 8080 host port to 80 container port<br>   podman ps -a # view container details, use -a to see all<br><span class="hljs-meta prompt_">   # </span><span class="language-bash">check using 127.0.0.1:8080 on a browser</span><br>   podman stop af1fc4ca0253 # container ID from podman ps -a<br>   podman rm af1fc4ca0253<br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>Run a service inside a container</p><ul><li><p>A Dockerfile can be used to create a custom container:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">      sudo setsebool -P container_manage_cgroup on<br>vi Dockerfile<br><span class="hljs-meta prompt_"># </span><span class="language-bash">contents of Dockerfile</span><br>      #####<br>      #FROM registry.access.redhat.com/ubi8/ubi-init<br><span class="hljs-meta prompt_">#</span><span class="language-bash">RUN yum -y install httpd; yum clean all; systemctl <span class="hljs-built_in">enable</span> httpd;</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">RUN <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Successful Web Server Test&quot;</span> &gt; /var/www/html/index.html</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">RUN <span class="hljs-built_in">mkdir</span> /etc/systemd/system/httpd.service.d/; <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&#x27;[Service]\nRestart=always&#x27;</span> &gt; /etc/systemd/system/httpd.service.d/httpd.conf</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">EXPOSE 80</span><br>      #####<br>podman build -t mysysd .<br>podman run -d --name=mysysd_run -p 80:80 mysysd<br>podman ps # confirm that container is running<br></code></pre></div></td></tr></table></figure></li><li><p>Note that the SELinux Boolean referred to above can be found using:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">getsebool -a | grep &quot;container&quot;<br></code></pre></div></td></tr></table></figure></li><li><p>Note that the registry above is the Podman Universal Base Image (UBI) for RHEL 8.</p></li></ul></li><li><p>Configure a container to start automatically as a systemd service</p><ul><li><p>Podman was not originally designed to bring up an entire Linux system or manage services for such things as start-up order, dependency, checking, and failed service recovery. That is the job of an initialisation system like systemd.</p></li><li><p>By setting up a systemd unit file on your host computer, you can have the host automatically start, stop, check the status, and otherwise manage a container as a systemd service. Many Linux services are already packaged for RHEL to run as systemd services.</p></li><li><p>To configure a container to run as a systemd service:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">sudo setsebool -P container_manage_cgroup on<br>      podman run -d --name httpd-server -p 8080:80 # -d for detached, -p for port forwarding<br>podman ps # confirm the container is running<br>vi /etc/systemd/system/httpd-container.service<br>      # contents of httpd-container.service<br>      #####<br>      #[Unit]<br>      #Description=httpd Container Service<br><span class="hljs-meta prompt_">#</span><span class="language-bash">Wants=syslog.service</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment">#[Service]</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">Restart=always</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">ExecStart=/usr/bin/podman start -a httpd-server</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">ExecStop=/usr/bin/podman stop -t 2 httpd-server</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment">#[Install]</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">WantedBy=multi-user.target</span><br>      #####<br>systemctl start httpd-container.service<br>systemctl status httpd-container.service # confirm running<br>systemctl enable httpd-container.service # will not run as part multi-user.target<br></code></pre></div></td></tr></table></figure></li><li><p>Note that other systemd services can be viewed in <code>/etc/systemd/system</code> and used as examples.</p></li></ul></li><li><p>Attach persistent storage to a container</p><ul><li>To attach persistent storage to a container:  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">ls /dev/sda1 # using this disk<br>mkdir -p /home/containers/disk1<br>podman run --privileged -it -v /home/containers/disk1:/mnt docker.io/library/httpd /bin/bash #  --privileged to allow with SELinux, -it for interactive terminal, -v to mount, and /bin/bash to provide a terminal<br></code></pre></div></td></tr></table></figure></li></ul></li></ol><h3 id="Exercises"><a href="#Exercises" class="headerlink" title="Exercises"></a>Exercises</h3><ol><li><p>Recovery and Practise Tasks</p><ul><li><p>Recover the system and fix repositories:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">press e at grub menu</span><br>rd.break # add to line starting with &quot;linux16&quot;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">Replace line containing <span class="hljs-string">&quot;BAD&quot;</span> with <span class="hljs-string">&quot;x86_64&quot;</span></span><br>mount -o remount, rw /sysroot<br>chroot /sysroot<br>passwd<br>touch /.autorelabel<br><span class="hljs-meta prompt_"># </span><span class="language-bash">reboot</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">reboot - will occur automaticaly after relabel (you can now login)</span><br>grub2-mkconfig -o /boot/grub2/grub.cfg # fix grub config<br>yum repolist all<br><span class="hljs-meta prompt_"># </span><span class="language-bash">change files <span class="hljs-keyword">in</span> /etc/yum.repos.d to <span class="hljs-built_in">enable</span> repository</span><br>yum update -y<br><span class="hljs-meta prompt_"># </span><span class="language-bash">reboot</span><br></code></pre></div></td></tr></table></figure></li><li><p>Add 3 new users alice, bob and charles. Create a marketing group and add these users to the group. Create a directory <code>/marketing</code> and change the owner to alice and group to marketing. Set permissions so that members of the marketing group can share documents in the directory but nobody else can see them. Give charles read-only permission. Create an empty file in the directory: </p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">useradd alice<br>useradd bob<br>useradd charles<br>groupadd marketing<br>mkdir /marketing<br>usermod -aG marketing alice<br>usermod -aG marketing bob<br>usermod -aG marketing charles<br>chgrp marketing marketing # may require restart to take effect<br>chmod 770 marketing<br>setfacl -m u:charles:r marketing<br>setfacl -m g:marketing:-wx marketing<br>touch file<br></code></pre></div></td></tr></table></figure></li><li><p>Set the system time zone and configure the system to use NTP:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">yum install chrony<br>systemctl enable chronyd.service<br>systemctl start chronyd.service<br>timedatectl set-timezone Australia/Sydney<br>timedatectl set-ntp true<br></code></pre></div></td></tr></table></figure></li><li><p>Install and enable the GNOME desktop:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">yum grouplist<br>yum groupinstall &quot;GNOME Desktop&quot; -y<br>systemtctl set-default graphical.target<br>reboot<br></code></pre></div></td></tr></table></figure></li><li><p>Configure the system to be an NFS client:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">yum install nfs-utils<br></code></pre></div></td></tr></table></figure></li><li><p>Configure password aging for charles so his password expires in 60 days:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">chage -M 60 charles<br>chage -l charles # to confirm result<br></code></pre></div></td></tr></table></figure></li><li><p>Lock bobs account:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">passwd -l bob<br>passwd --status bob # to confirm result<br></code></pre></div></td></tr></table></figure></li><li><p>Find all setuid files on the system and save the list to <code>/testresults/setuid.list</code>:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">find / -perm /4000 &gt; setuid.list<br></code></pre></div></td></tr></table></figure></li><li><p>Set the system FQDN to <em>centos.local</em> and alias to <em>centos</em>:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">hostnamectl set-hostname centos --pretty<br>hostnamectl set-hostname centos.local<br>hostname -s # to confirm result<br>hostname # to confirm result<br></code></pre></div></td></tr></table></figure></li><li><p>As charles, create a once-off job that creates a file called <code>/testresults/bob</code> containing the text “Hello World. This is Charles.” in 2 days later:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">vi hello.sh<br><span class="hljs-meta prompt_"># </span><span class="language-bash">contents of hello.sh</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">####</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Hello World. This is Charles.&quot;</span> &gt; bob</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">####</span></span><br>chmod 755 hello.sh<br>usermod charles -U -e -- &quot;&quot; # for some reason the account was locked<br>at now + 2 days -f /testresults/bob/hello.sh<br>cd /var/spool/at # can check directory as root to confirm<br>atq # check queued job as charles<br><span class="hljs-meta prompt_"># </span><span class="language-bash">atrm 1 <span class="hljs-comment"># can remove the job using this command</span></span><br></code></pre></div></td></tr></table></figure></li><li><p>As alice, create a periodic job that appends the current date to the file <code>/testresults/alice</code> every 5 minutes every Sunday and Wednesday between the hours of 3am and 4am. Remove the ability of bob to create cron jobs:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">echo &quot;bob&quot; &gt;&gt; /etc/at.deny<br>sudo -i -u alice<br>vi addDate.sh<br><span class="hljs-meta prompt_"># </span><span class="language-bash">contents of hello.sh</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">####</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-meta">#!/bin/bash</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-built_in">date</span> &gt;&gt; alice</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">####</span></span><br>/testresults/alice/addDate.sh<br>crontab -e<br><span class="hljs-meta prompt_"># </span><span class="language-bash">*/5 03,04 * * sun,wed /testresults/alice/addDate.sh</span><br>crontab -l # view crontab<br><span class="hljs-meta prompt_"># </span><span class="language-bash">crontab -r can remove the job using this <span class="hljs-built_in">command</span></span><br></code></pre></div></td></tr></table></figure></li><li><p>Set the system SELinux mode to permissive:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">setstatus # confirm current mode is not permissive<br>vi /etc/selinux/config # Update to permissive<br>reboot<br>setstatus # confirm current mode is permissive<br></code></pre></div></td></tr></table></figure></li><li><p>Create a firewall rule to drop all traffic from 10.10.10.*:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">firewall-cmd --zone=drop --add-source 10.10.10.0/24<br>firewall-cmd --list-all --zone=drop # confirm rule is added<br>firewall-cmd --permanent --add-source 10.10.10.0/24<br>reboot<br>firewall-cmd --list-all --zone=drop # confirm rule remains<br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>Linux Academy - Using SSH, Redirection, and Permissions in Linux</p><ul><li><p>Enable SSH to connect without a password from the dev user on server1 to the dev user on server2:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">ssh dev@3.85.167.210<br>ssh-keygen # created in /home/dev/.ssh<br>ssh-copy-id 34.204.14.34<br></code></pre></div></td></tr></table></figure></li><li><p>Copy all tar files from <code>/home/dev/</code> on server1 to <code>/home/dev/</code> on server2, and extract them making sure the output is redirected to <code>/home/dev/tar-output.log</code>:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">scp *.tar* dev@34.204.14.34:/home/dev<br>tar xfz deploy_script.tar.gz &gt; tar-output.log<br>tar xfz deploy_content.tar.gz &gt;&gt; tar-output.log<br></code></pre></div></td></tr></table></figure></li><li><p>Set the umask so that new files are only readable and writeable by the owner:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">umask 0066 # default is 0666, subtract 0066 to get 0600<br></code></pre></div></td></tr></table></figure></li><li><p>Verify the <code>/home/dev/deploy.sh</code> script is executable and run it:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">chmod 711 deploy.sh<br>./deploy.sh<br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>Linux Academy - Storage Management</p><ul><li><p>Create a 2GB GPT Partition:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">lsblk # observe nvme1n1 disk<br>sudo gdisk /dev/nvme1n1<br><span class="hljs-meta prompt_"># </span><span class="language-bash">enter n <span class="hljs-keyword">for</span> new partition</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">accept default partition number</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">accept default starting sector</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-keyword">for</span> the ending sector, enter +2G to create a 2GB partition</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">accept default partition <span class="hljs-built_in">type</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">enter w to write the partition information</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">enter y to proceed</span><br>lsblk # observe nvme1n1 now has partition<br>partprobe # inform OS of partition change<br></code></pre></div></td></tr></table></figure></li><li><p>Create a 2GB MBR Partition:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">lsblk # observe nvme2n1 disk<br>sudo fdisk /dev/nvme2n1<br><span class="hljs-meta prompt_"># </span><span class="language-bash">enter n <span class="hljs-keyword">for</span> new partition</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">accept default partition <span class="hljs-built_in">type</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">accept default partition number</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">accept default first sector</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-keyword">for</span> the ending sector, enter +2G to create a 2GB partition</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">enter w to write the partition information</span><br></code></pre></div></td></tr></table></figure></li><li><p>Format the GPT Partition with XFS and mount the device persistently:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">sudo mkfs.xfs /dev/nvme1n1p1<br>sudo blkid # observe nvme1n1p1 UUID<br>vi /etc/fstab<br><span class="hljs-meta prompt_"># </span><span class="language-bash">add a line with the new UUID and specify /mnt/gptxfs</span><br>mkdir /mnt/gptxfs<br>sudo mount -a<br>mount # confirm that it&#x27;s mounted<br></code></pre></div></td></tr></table></figure></li><li><p>Format the MBR Partition with ext4 and mount the device persistently:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">sudo mkfs.ext4 /dev/nvme2n1p1<br>mkdir /mnt/mbrext4<br>mount /dev/nvme2n1p1 /mnt/mbrext4<br>mount # confirm that it&#x27;s mounted<br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>Linux Academy - Working with LVM Storage</p><ul><li><p>Create Physical Devices:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">lsblk # observe disks xvdf and xvdg<br>pvcreate /dev/xvdf /dev/xvdg<br></code></pre></div></td></tr></table></figure></li><li><p>Create Volume Group:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">vgcreate RHCSA /dev/xvdf /dev/xvdg<br>vgdisplay # view details<br></code></pre></div></td></tr></table></figure></li><li><p>Create a Logical Volume:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">lvcreate -n pinehead -L 3G RHCSA<br>lvdisplay # or lvs, to view details<br></code></pre></div></td></tr></table></figure></li><li><p>Format the LV as XFS and mount it persistently at <code>/mnt/lvol</code>:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">fdisk -l # get path for lv<br>mkfs.xfs /dev/mapper/RHCSA-pinehead<br>mkdir /mnt/lvol<br>blkid # copy UUID for /dev/mapper/RHCSA-pinehead<br>echo &quot;UUID=76747796-dc33-4a99-8f33-58a4db9a2b59&quot; &gt;&gt; /etc/fstab<br><span class="hljs-meta prompt_"># </span><span class="language-bash">add the path /mnt/vol and copy the other columns</span><br>mount -a<br>mount # confirm that it&#x27;s mounted<br></code></pre></div></td></tr></table></figure></li><li><p>Grow the mount point by 200MB:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">lvextend -L +200M /dev/RHCSA/pinehead<br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>Linux Academy - Network File Systems</p><ul><li><p>Set up a SAMBA share:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">on the server</span><br>yum install samba -y<br>vi /etc/samba/smb.conf<br><span class="hljs-meta prompt_"># </span><span class="language-bash">add the below block</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">####</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">[share]</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">   browsable = <span class="hljs-built_in">yes</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">   path = /smb</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">   writeable = <span class="hljs-built_in">yes</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">####</span></span><br>useradd shareuser<br>smbpasswd -a shareuser # enter password<br>mkdir /smb<br>systemctl start smb<br>chmod 777 /smb<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">on the client</span><br>mkdir /mnt/smb<br>yum install cifs-utils -y<br><span class="hljs-meta prompt_"># </span><span class="language-bash">on the server hostname -I shows private IP</span><br>mount -t cifs //10.0.1.100/share /mnt/smb -o username=shareuser,password= # private ip used<br></code></pre></div></td></tr></table></figure></li><li><p>Set up the NFS share:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">on the server</span><br>yum install nfs-utils -y<br>mkdir /nfs<br>echo &quot;/nfs *(rw)&quot; &gt;&gt; /etc/exports<br>chmod 777 /nfs<br>exportfs -a<br>systemctl start &#123;rpcbind,nfs-server,rpc-statd,nfs-idmapd&#125;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">on the client</span><br>yum install nfs-utils -y<br>mkdir /mnt/nfs<br>showmount -e 10.0.1.101 # private ip used<br>systemctl start rpcbind<br>mount -t nfs 10.0.1.101:/nfs /mnt/nfs<br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>Linux Academy - Maintaining Linux Systems</p><ul><li><p>Schedule a job to update the server midnight tonight:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">echo &quot;dnf update -y&quot; &gt; update.sh<br>chmod +x update.sh<br>at midnight -f update.sh<br>atq # to verify that job is scheduled<br></code></pre></div></td></tr></table></figure></li><li><p>Modify the NTP pools:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">vi /etc/chrony.conf<br><span class="hljs-meta prompt_"># </span><span class="language-bash">modify the pool directive at the top of the file</span><br></code></pre></div></td></tr></table></figure></li><li><p>Modify GRUB to boot a different kernel:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">grubby --info=ALL # list installed kernels<br>grubby --set-default-index=1<br>grubby --default-index # verify it worked<br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>Linux Academy - Managing Users in Linux</p><ul><li><p>Create the superhero group:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">groupadd superhero<br></code></pre></div></td></tr></table></figure></li><li><p>Add user accounts for Tony Stark, Diana Prince, and Carol Danvers and add them to the superhero group:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">useradd tstark -G superhero<br>useradd cdanvers -G superhero<br>useradd dprince -G superhero<br></code></pre></div></td></tr></table></figure></li><li><p>Replace the primary group of Tony Stark with the wheel group:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">usermod tstark -ag wheel<br>grep wheel /etc/group # to verify<br></code></pre></div></td></tr></table></figure></li><li><p>Lock the account of Diana Prince:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">usermod -L dprince <br>chage dprince -E 0<br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>Linux Academy - SELinux Learning Activity</p><ul><li><p>Fix the SELinux permission on <code>/opt/website</code>:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">cd /var/www # the default root directory for a web server<br>ls -Z # observe permission on html folder<br>semanage fcontext -a -t httpd_sys_content_t &#x27;/opt/website(/.*)&#x27;<br>restorecon /opt/website<br></code></pre></div></td></tr></table></figure></li><li><p>Deploy the website and test:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">mv /root/index.html /opt/website<br>curl localhost/index.html # receive connection refused response<br>systemctl start httpd # need to start the service<br>setenforce 0 # set to permissive to allow for now<br></code></pre></div></td></tr></table></figure></li><li><p>Resolve the error when attempting to access <code>/opt/website</code>:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">ll -Z # notice website has admin_home_t<br>restorecon /opt/website/index.html<br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>Linux Academy - Setting up VDO</p><ul><li><p>Install VDO and ensure the service is running:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">dnf install vdo -y<br>systemctl start vdo &amp;&amp; systemctl enable vdo<br></code></pre></div></td></tr></table></figure></li><li><p>Setup a 100G VM storage volume:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">vdo create --name=ContainerStorage --device=/dev/nvme1n1 --vdoLogicalSize=100G --sparseIndex=disabled<br><span class="hljs-meta prompt_"># </span><span class="language-bash">spareIndex <span class="hljs-built_in">set</span> to meet requirement of dense index deduplication</span><br>mkfs.xfs -K /dev/mapper/ContainerStorage<br>mkdir /mnt/containers<br>mount /dev/mapper/ContainerStorage /mnt/containers<br>vi /etc/fstab # add line /dev/mapper/ContainerStorage /mnt/containers xfs defaults,_netdev,x-systemd.device-timeout=0,x-systemd.requires=vdo.service 0 0<br></code></pre></div></td></tr></table></figure></li><li><p>Setup a 60G website storage volume:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">vdo create --name=WebsiteStorage --device=/dev/nvme2n1 --vdoLogicalSize=60G --deduplication=disabled<br><span class="hljs-meta prompt_"># </span><span class="language-bash">deduplication <span class="hljs-built_in">set</span> to meet requirement of no deduplication</span><br>mkfs.xfs -K /dev/mapper/WebsiteStorage<br>mkdir /mnt/website<br>mount /dev/mapper/WebsiteFiles /mnt/website<br>vi /etc/fstab # add line for /dev/mapper/WebsiteStorage /mnt/website xfs defaults,_netdev,x-systemd.device-timeout=0,x-systemd.requires=vdo.service 0 0<br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>Linux Academy - Final Practise Exam</p><ul><li><p>Start the guest VM:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">use a VNC viewer connect to IP:5901</span><br>virsh list --all<br>virsh start --centos7.0<br><span class="hljs-meta prompt_"># </span><span class="language-bash">we already have the VM installed, we just needed to start it (so we don<span class="hljs-string">&#x27;t need virt-install)</span></span><br>dnf install virt-viewer -y<br>virt-viewer centos7.0 # virt-manager can also be used<br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-string">now we are connected to the virtual machine</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-string">send key Ctrl+Alt+Del when prompted for password, as we don&#x27;</span>t know it</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">press e on GRUB screen</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">add rd.break on the linux16 line</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">now at the emergency console</span><br>mount -o remount, rw /sysroot<br>chroot /sysroot<br>passwd<br>touch /.autorelabel<br>reboot -f # needs -f to work for some reason<br><span class="hljs-meta prompt_"># </span><span class="language-bash">it will restart when it completes relabelling</span><br></code></pre></div></td></tr></table></figure></li><li><p>Create three users (Derek, Tom, and Kenny) that belong to the instructors group. Prevent Tom’s user from accessing a shell, and make his account expire 10 day from now:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">groupadd instructors<br>useradd derek -G instructors<br>useradd tom -s /sbin/nologin -G instructors<br>useradd kenny -G instructors<br>chage tom -E 2020-10-14<br>chage -l tom # to check<br>cat /etc/group | grep instructors # to check<br></code></pre></div></td></tr></table></figure></li><li><p>Download and configure apache to serve index.html from <code>/var/web</code> and access it from the host machine:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">there is some setup first to establish connectivity/repo</span><br>nmcli device # eth0 shown as disconnected<br>nmcli connection up eth0<br>vi /etc/yum.repos.d/centos7.repo<br>      # contents of centos.repo<br>      #####<br>      #[centos7]<br>      #name = centos<br>      #baseurl = http://mirror.centos.org/centos/7/os/x86_64/<br><span class="hljs-meta prompt_">#</span><span class="language-bash">enabled = 1</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">gpgcheck = 1</span><br>      #gpgkey = file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7<br>      #####<br>yum repolist # confirm<br>yum install httpd -y<br>systemctl start httpd.service<br>mkdir /var/web<br>vi /etc/httpd/conf/httpd.conf<br><span class="hljs-meta prompt_"># </span><span class="language-bash">change DocumentRoot to <span class="hljs-string">&quot;/var/web&quot;</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">change Directory tag to <span class="hljs-string">&quot;/var/web&quot;</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">change Directory tag to <span class="hljs-string">&quot;/var/web/html&quot;</span></span><br>echo &quot;Hello world&quot; &gt; /var/web/index.html<br>systemctl start httpd.service<br>ip a s # note the first inet address for eth0 # from the guest VM<br>curl http://192.168.122.213/ # from the host <br><span class="hljs-meta prompt_"># </span><span class="language-bash">note that no route to host returned</span><br>firewall-cmd --list-services # notice no http service<br>firewall-cmd --add-service=http --permanent<br>firewall-cmd --reload<br>firewall-cmd --list-services # confirm http service<br>curl http://192.168.122.255/ # from the host <br><span class="hljs-meta prompt_"># </span><span class="language-bash">note that 403 error is returned</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">ll -Z comparision between /var/web and /var/www shows that the SELinux <span class="hljs-built_in">type</span> of index.html should be httpd_sys_context_t and not var_t</span><br>yum provides \*/semanage # suggests policycoreutils-python<br>yum install policycoreutils-python -y<br>semanage fcontext -a -t httpd_sys_content_t &quot;/var/web(/.*)?&quot;<br>restorecon -R -v /var/web<br>curl http://192.168.122.255/ # from the host - success!<br></code></pre></div></td></tr></table></figure></li><li><p>Configure umask to ensure all files created by any user cannot be accessed by the “other” users:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">umask 0026 # also reflect change in /etc/profile and /etc/bashrc<br><span class="hljs-meta prompt_"># </span><span class="language-bash">default <span class="hljs-keyword">for</span> files is 0666 so will be 0640 after mask</span><br></code></pre></div></td></tr></table></figure></li><li><p>Find all files in <code>/etc</code> (not including subdirectories) that are older than 720 days, and output a list to <code>/root/oldfiles</code>:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">find /etc -maxdepth 1 -mtime +720 &gt; /root/oldfiles <br></code></pre></div></td></tr></table></figure></li><li><p>Find all log messages in <code>/var/log/messages</code> that contain “ACPI”, and export them to a file called <code>/root/logs</code>. Then archive all of <code>/var/log</code> and save it to <code>/tmp/log_archive.tgz</code>:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">grep &quot;ACPI&quot; /var/log/messages &gt; /root/logs<br>tar -czf /tmp/log_archive.tgz /var/log/ # note f flag must be last!<br></code></pre></div></td></tr></table></figure></li><li><p>Modify the GRUB timeout and make it 1 second instead of 5 seconds:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">find / -iname grub.cfgreboot<br><span class="hljs-meta prompt_"># </span><span class="language-bash">/etc/grub.d, /etc/default/grub and grub2-mkconfig referred to <span class="hljs-keyword">in</span> /boot/grub2/grub.cfg</span><br>vi /etc/default/grub # change GRUB_TIMEOUT to 1<br>grub2-mkconfig -o /boot/grub2/grub.cfg<br>reboot # confirm timeout now 1 second<br></code></pre></div></td></tr></table></figure></li><li><p>Create a daily cron job at 4:27PM for the Derek user that runs <code>cat /etc/redhat-release</code> and redirects the output to <code>/home/derek/release</code>:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">cd /home/derek<br>vi script.sh<br><span class="hljs-meta prompt_"># </span><span class="language-bash">contents of script.sh</span><br>      #####<br>      ##!/bin/sh<br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-built_in">cat</span> /etc/redhat-release &gt; /home/derek/release</span><br>      #####<br>chmod +x script.sh<br>crontab -u derek -e<br><span class="hljs-meta prompt_"># </span><span class="language-bash">contents of crontab</span><br>      #####<br>      #27 16 * * * /home/derek/script.sh<br>      #####<br>crontab -u derek -l # confirm<br></code></pre></div></td></tr></table></figure></li><li><p>Configure <code>time.nist.gov</code> as the only NTP Server:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">vi /etc/chrony.conf<br><span class="hljs-meta prompt_"># </span><span class="language-bash">replace lines at the top with server time.nist.gov</span><br></code></pre></div></td></tr></table></figure></li><li><p>Create an 800M swap partition on the <code>vdb</code> disk and use the UUID to ensure that it is persistent:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">fdisk -l # note that we have one MBR partitions<br>fdisk /dev/vdb<br><span class="hljs-meta prompt_"># </span><span class="language-bash">select n</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">select p</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">select default</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">select default</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">enter +800M</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">select w</span><br>partprobe<br>lsblk # confirm creation<br>mkswap /dev/vdb1<br>vi /etc/fstab<br><span class="hljs-meta prompt_"># </span><span class="language-bash">add line containing UUID and swap <span class="hljs-keyword">for</span> the next 2 columns</span><br>swapon -a<br>swap # confirm swap is available<br></code></pre></div></td></tr></table></figure></li><li><p>Create a new logical volume (LV-A) with a size of 30 extents that belongs to the volume group VG-A (with a PE size of 32M). After creating the volume, configure the server to mount it persistently on <code>/mnt</code>:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">observe through fdisk -l and <span class="hljs-built_in">df</span> -h that /dev/vdc is available with no file system</span><br>yum provides pvcreate # lvm2 identified<br>yum install lvm2 -y<br>pvcreate /dev/vdc<br>vgcreate VG-A /dev/vdc -s 32M<br>lvcreate -n LV-A -l 30 VG-A<br>mkfs.xfs /dev/VG-A/LV-A<br><span class="hljs-meta prompt_"># </span><span class="language-bash">note <span class="hljs-keyword">in</span> directory /dev/mapper the name is VG--A-LV--A</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">add an entry to /etc/fstab at /dev/mapper/VG--A-LV--A and /mnt (note that you can mount without the UUID here)</span><br>mount -a<br>df -h # verify that LV-A is mounted<br></code></pre></div></td></tr></table></figure></li><li><p>On the host, not the guest VM, utilise ldap.linuxacademy.com for SSO, and configure AutoFS to mount user’s home directories on login. Make sure to use Kerberos:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">this objective is no longer required <span class="hljs-keyword">in</span> RHCSA 8</span><br></code></pre></div></td></tr></table></figure></li><li><p>Change the hostname of the guest to “RHCSA”:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">hostnamectl set-hostname rhcsa<br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>Asghar Ghori - Exercise 3-1: Create Compressed Archives</p><ul><li>Create tar files compressed with gzip and bzip2 and extract them:  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">gzip</span><br>tar -czf home.tar.gz /home<br>tar -tf /home.tar.gz # list files<br>tar -xf home.tar.gz<br>      <br><span class="hljs-meta prompt_"># </span><span class="language-bash">bzip</span><br>tar -cjf home.tar.bz2 /home<br>tar -xf home.tar.bz2 -C /tmp<br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>Asghar Ghori - Exercise 3-2: Create and Manage Hard Links</p><ul><li>Create an empty file <em>hard1</em> under <em>&#x2F;tmp</em> and display its attributes. Create hard links <em>hard2</em> and <em>hard3</em>. Edit <em>hard2</em> and observe the attributes. Remove <em>hard1</em> and <em>hard3</em> and list the attributes again:  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">touch hard1<br>ln hard1 hard2<br>ln hard1 hard3<br>ll -i<br><span class="hljs-meta prompt_"># </span><span class="language-bash">observe <span class="hljs-built_in">link</span> count is 3 and same inode number</span><br>echo &quot;hi&quot; &gt; hard2<br><span class="hljs-meta prompt_"># </span><span class="language-bash">observe file size increased to the same value <span class="hljs-keyword">for</span> all files</span><br>rm hard1<br>rm hard3<br><span class="hljs-meta prompt_"># </span><span class="language-bash">observe <span class="hljs-built_in">link</span> count is 1</span><br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>Asghar Ghori - Exercise 3-3: Create and Manage Soft Links</p><ul><li>Create an empty file <em>soft1</em> under <code>/root</code> pointing to <code>/tmp/hard2</code>. Edit <em>soft1</em> and list the attributes after editing. Remove <em>hard2</em> and then list <em>soft1</em>:  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">ln -s /tmp/hard2 soft1<br>ll -i<br><span class="hljs-meta prompt_"># </span><span class="language-bash">observe soft1 and hard2 have the same inode number</span><br>echo &quot;hi&quot; &gt;&gt; soft1<br><span class="hljs-meta prompt_"># </span><span class="language-bash">observe file size increased</span><br>cd /root<br>ll -i <br><span class="hljs-meta prompt_"># </span><span class="language-bash">observe the soft <span class="hljs-built_in">link</span> is now broken</span><br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>Asghar Ghori - Exercise 4-1: Modify Permission Bits Using Symbolic Form</p><ul><li>Create a file <em>permfile1</em> with read permissions for owner, group and other. Add an execute bit for the owner and a write bit for group and public. Revoke the write bit from public and assign read, write, and execute bits to the three user categories at the same time. Revoke write from the owning group and write, and execute bits from public:  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">touch permfile1<br>chmod 444 permfile1<br>chmod -v u+x,g+w,o+w permfile1<br>chmod -v o-w,a=rwx permfile1<br>chmod -v g-w,o-wx permfile1<br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>Asghar Ghori - Exercise 4-2: Modify Permission Bits Using Octal Form</p><ul><li>Create a file <em>permfile2</em> with read permissions for owner, group and other. Add an execute bit for the owner and a write bit for group and public. Revoke the write bit from public and assign read, write, and execute permissions to the three user categories at the same time:  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">touch permfile2<br>chmod 444 permfile2<br>chmod -v 566 permfile2<br>chmod -v 564 permfile2<br>chmod -v 777 permfile2<br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>Asghar Ghori - Exercise 4-3: Test the Effect of setuid Bit on Executable Files</p><ul><li>As root, remove the setuid bit from <code>/usr/bin/su</code>. Observe the behaviour for another user attempting to switch into root, and then add the setuid bit back:  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">chmod -v u-s /usr/bin/su<br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">users</span> now receive authentication failure when attempting to switch</span><br>chmod -v u+s /usr/bin/su<br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>Asghar Ghori - Exercise 4-4: Test the Effect of setgid Bit on Executable Files</p><ul><li>As root, remove the setgid bit from <code>/usr/bin/write</code>. Observe the behaviour when another user attempts to run this command, and then add the setgid bit back:  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">chmod -v g-s /usr/bin/write<br><span class="hljs-meta prompt_"># </span><span class="language-bash">Other <span class="hljs-built_in">users</span> can no longer write to root</span><br>chmod -v g+s /usr/bin/write<br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>Asghar Ghori - Exercise 4-5: Set up Shared Directory for Group Collaboration</p><ul><li>Create users <em>user100</em> and <em>user200</em>. Create a group <em>sgrp</em> with GID 9999 and add <em>user100</em> and <em>user200</em> to this group. Create a directory <code>/sdir</code> with ownership and owning groups belong to <em>root</em> and <em>sgrp</em>, and set the setgid bit on <em>&#x2F;sdir</em> and test:  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">groupadd sgrp -g 9999<br>useradd user100 -G sgrp <br>useradd user200 -G sgrp <br>mkdir /sdir<br>chown root:sgrp sdir<br>chmod g+s,g+w sdir<br><span class="hljs-meta prompt_"># </span><span class="language-bash">as user100</span><br>cd /sdir<br>touch file<br><span class="hljs-meta prompt_"># </span><span class="language-bash">owning group is sgrp and not user100 due to setgid bit</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">as user200</span><br>vi file<br><span class="hljs-meta prompt_"># </span><span class="language-bash">user200 can also <span class="hljs-built_in">read</span> and write</span><br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>Asghar Ghori - Exercise 4-6: Test the Effect of Sticky Bit</p><ul><li>Create a file under <code>/tmp</code> as <em>user100</em> and try to delete it as <em>user200</em>. Unset the sticky bit on <code>/tmp</code> and try to erase the file again. Restore the sticky bit on <code>/tmp</code>:  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">as user100</span><br>touch /tmp/myfile<br><span class="hljs-meta prompt_"># </span><span class="language-bash">as user200</span><br>rm /tmp/myfile<br><span class="hljs-meta prompt_"># </span><span class="language-bash">cannot remove file: Operation not permitted</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">as root</span><br>chmod -v o-t tmp<br><span class="hljs-meta prompt_"># </span><span class="language-bash">as user200</span><br>rm /tmp/myfile<br><span class="hljs-meta prompt_"># </span><span class="language-bash">file can now be removed</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">as root</span><br>chmod -v o+t tmp<br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>Asghar Ghori - Exercise 4-7: Identify, Apply, and Erase Access ACLs</p><ul><li>Create a file <em>acluser</em> as <em>user100</em> in <code>/tmp</code> and check if there are any ACL settings on the file. Apply access ACLs on the file for <em>user100</em> for read and write access. Add <em>user200</em> to the file for full permissions. Remove all access ACLs from the file:  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">as user100</span><br>touch /tmp/acluser<br>cd /tmp<br>getfacl acluser<br><span class="hljs-meta prompt_"># </span><span class="language-bash">no ACLs on the file</span><br>setfacl -m u:user100:rw,u:user200:rwx acluser<br>getfacl acluser<br><span class="hljs-meta prompt_"># </span><span class="language-bash">ACLs have been added</span><br>setfacl -x user100,user200 acluser<br>getfacl acluser<br><span class="hljs-meta prompt_"># </span><span class="language-bash">ACLs have been removed</span><br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>Asghar Ghori - Exercise 4-8: Apply, Identify, and Erase Default ACLs</p><ul><li>Create a directory <em>projects</em> as <em>user100</em> under <code>/tmp</code>. Set the default ACLs on the directory for <em>user100</em> and <em>user200</em> to give them full permissions. Create a subdirectory <em>prjdir1</em> and a file <em>prjfile1</em> under <em>projects</em> and observe the effects of default ACLs on them. Delete the default entries:  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">as user100</span><br>cd /tmp<br>mkdir projects<br>getfacl projects<br><span class="hljs-meta prompt_"># </span><span class="language-bash">No default ACLs <span class="hljs-keyword">for</span> user100 and user200</span><br>setfacl -dm u:user100:rwx,u:user200:rwx projects<br>getfacl projects<br><span class="hljs-meta prompt_"># </span><span class="language-bash">Default ACLs added <span class="hljs-keyword">for</span> user100 and user200</span><br>mkdir projects/prjdir1<br>getfacl prjdir1<br><span class="hljs-meta prompt_"># </span><span class="language-bash">Default ACLs inherited</span><br>touch prjdir1/prjfile1<br>getfacl prjfile1<br><span class="hljs-meta prompt_"># </span><span class="language-bash">Default ACLs inherited</span><br>setfacl -k projects<br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>Asghar Ghori - Exercise 5-1: Create a User Account with Default Attributes</p><ul><li>Create <em>user300</em> with the default attributes in the <em>useradd</em> and <em>login.defs</em> files. Assign this user a password and show the line entries from all 4 authentication files:  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">useradd user300<br>passwd user300<br>grep user300 /etc/passwd /etc/shadow /etc/group /etc/gshadow<br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>Asghar Ghori - Exercise 5-2: Create a User Account with Custom Values</p><ul><li>Create <em>user300</em> with the default attributes in the <em>useradd</em> and <em>login.defs</em> files. Assign this user a password and show the line entries from all 4 authentication files:  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">useradd user300<br>passwd user300<br>grep user300 /etc/passwd /etc/shadow /etc/group /etc/gshadow<br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>Asghar Ghori - Exercise 5-3: Modify and Delete a User Account</p><ul><li>For <em>user200</em> change the login name to <em>user200new</em>, UID to 2000, home directory to <code>/home/user200new</code>, and login shell to <code>/sbin/nologin</code>. Display the line entry for <em>user2new</em> from the <em>passwd</em> for validation. Remove this user and confirm the deletion:  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">usermod -l user200new -m -d /home/user200new -s /sbin/nologin -u 2000 user200<br>grep user200new /etc/passwd # confirm updated values<br>userdel -r user200new<br>grep user200new /etc/passwd # confirm user200new deleted<br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>Asghar Ghori - Exercise 5-4: Create a User Account with No-Login Access</p><ul><li>Create an account <em>user400</em> with default attributes but with a non-interactive shell. Assign this user the nologin shell to prevent them from signing in. Display the new line entry frmo the <em>passwd</em> file and test the account:  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">useradd user400 -s /sbin/nologin<br>passwd user400 # change password<br>grep user400 /etc/passwd<br>sudo -i -u user400 # This account is currently not available<br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>Asghar Ghori - Exercise 6-1: Set and Confirm Password Aging with chage</p><ul><li>Configure password ageing for user100 using the <em>chage</em> command. Set the mindays to 7, maxdays to 28, and warndays to 5. Verify the new settings. Rerun the command and set account expiry to January 31, 2020:  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">chage -m 7 -M 28 -W 5 user100<br>chage -l user100<br>chage -E 2021-01-31 user100<br>chage -l<br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>Asghar Ghori - Exercise 6-2: Set and Confirm Password Aging with passwd</p><ul><li>Configure password aging for <em>user100</em> using the <em>passwd</em> command. Set the mindays to 10, maxdays to 90, and warndays to 14, and verify the new settings. Set the number of inactivity days to 5 and ensure that the user is forced to change their password upon next login:  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">passwd -n 10 -x 90 -w 14 user100<br>passwd -S user100 # view status<br>passwd -i 5 user100<br>passwd -e user100<br>passwd -S user100<br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>Asghar Ghori - Exercise 6-3: Lock and Unlock a User Account with usermod and passwd</p><ul><li>Disable the ability of user100 to log in using the <em>usermod</em> and <em>passwd</em> commands. Verify the change and then reverse it:  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">grep user100 /etc/shadow # confirm account not locked by absence of &quot;!&quot; in password<br>passwd -l user100 # usermod -L also works<br>grep user100 /etc/shadow<br>passwd -u user100 # usermod -U also works<br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>Asghar Ghori - Exercise 6-4: Create a Group and Add Members</p><ul><li>Create a group called <em>linuxadm</em> with GID 5000 and another group called <em>dba</em> sharing the GID 5000. Add <em>user100</em> as a secondary member to group <em>linxadm</em>:  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">groupadd -g 5000 linuxadm<br>groupadd -o -g 5000 dba # note need -o to share GID<br>usermod -G linuxadm user100<br>grep user100 /etc/group # confirm user added to group<br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>Asghar Ghori - Exercise 6-5: Modify and Delete a Group Account</p><ul><li>Change the <em>linuxadm</em> group name to <em>sysadm</em> and the GID to 6000. Modify the primary group for user100 to <em>sysadm</em>. Remove the <em>sysadm</em> group and confirm:  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">groupmod -n sysadm -g 6000 linuxadm<br>usermod -g sysadm user100<br>groupdel sysadm # can&#x27;t remove while user100 has as primary group<br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>Asghar Ghori - Exercise 6-6: Modify File Owner and Owning Group</p><ul><li>Create a file <em>file10</em> and a directory <em>dir10</em> as <em>user200</em> under <code>/tmp</code>, and then change the ownership for <em>file10</em> to <em>user100</em> and the owning group to <em>dba</em> in 2 separate transactions. Apply ownership on <em>file10</em> to <em>user200</em> and owning group to <em>user100</em> at the same time. Change the 2 attributes on the directory to <em>user200:dba</em> recursively:  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">as user200</span><br>mkdir /tmp/dir10<br>touch /tmp/file10<br>sudo chown user100 /tmp/file10 <br>sudo chgrp dba /tmp/file10<br>sudo chown user200:user100 /tmp/file10<br>sudo chown -R user200:user100 /tmp/dir10<br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>Asghar Ghori - Exercise 7-1: Modify Primary Command Prompt</p><ul><li>Customise the primary shell prompt to display the information enclosed within the quotes “&lt;username on hostname in pwd&gt;:” using variable and command substitution. Edit the <code>~/.profile</code>file for <em>user100</em> and define the new value in there for permanence:  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">export PS1=&quot;&lt; $LOGNAME on $(hostname) in \$PWD&gt;&quot;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">add to ~/.profile <span class="hljs-keyword">for</span> user100</span><br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>Asghar Ghori - Exercise 8-1: Submit, View, List, and Remove an at Job</p><ul><li>Submit a job as <em>user100</em> to run the <em>date</em> command at 11:30pm on March 31, 2021, and have the output and any error messages generated redirected to <code>/tmp/date.out</code>. List the submitted job and then remove it:  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">as user100</span><br>at 11:30pm 03/31/2021<br><span class="hljs-meta prompt_"># </span><span class="language-bash">enter <span class="hljs-string">&quot;date &amp;&gt; /tmp/date.out&quot;</span></span><br>atq # view job in queue<br>at -c 1 # view job details<br>atrm 1 # remove job<br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>Asghar Ghori - Exercise 8-2: Add, List, and Remove a Cron Job</p><ul><li>Assume all users are currently denied access to cron. Submit a cron job as <em>user100</em> to echo “Hello, this is a cron test.”. Schedule this command to execute at every fifth minute past the hour between 10:00 am and 11:00 am on the fifth and twentieth of every month. Have the output redirected to <code>/tmp/hello.out</code>. List the cron entry and then remove it:  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">as root</span><br>echo &quot;user100&quot; &gt; /etc/cron.allow<br><span class="hljs-meta prompt_"># </span><span class="language-bash">ensure cron.deny is empty</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">as user100</span><br>crontab<br><span class="hljs-meta prompt_"># </span><span class="language-bash">*/5 10,11 5,20 * * <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Hello, this is a cron test.&quot;</span> &gt;&gt; /tmp/hello.out</span><br>crontab -e # list<br>crontab -l # remove<br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>Asghar Ghori - Exercise 9-1: Perform Package Management Tasks Using rpm</p><ul><li>Verify the integrity and authenticity of a package called <em>dcraw</em> located in the <code>/mnt/AppStream/Packages</code> directory on the installation image and then install it. Display basic information about the package, show files it contains, list documentation files, verify the package attributes and remove the package:   <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">ls -l /mnt/AppStream/Packages/dcraw*<br>rpmkeys -K /mnt/AppStream/Packages/dcraw-9.27.0-9.e18.x86_64.rpm # check integrity<br>sudo rpm -ivh /mnt/AppStream/Packages/dcraw-9.27.0-9.e18.x86_64.rpm # -i is install, -v is verbose and -h is hash<br>rpm -qi dcraw # -q is query and -i is install<br>rpm -qd dcraw # -q is query and -d is docfiles<br>rpm -Vv dcraw # -V is verify and -v is verbose<br>sudo rpm -ve # -v is verbose and -e is erase<br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>Asghar Ghori - Exercise 10-1: Configure Access to Pre-Built ISO Repositories</p><ul><li>Access the repositories that are available on the RHEL 8 image. Create a definition file for the repositories and confirm:  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">df -h # after mounting optical drive in VirtualBox<br>vi /etc/yum.repos.d/centos.local<br><span class="hljs-meta prompt_"># </span><span class="language-bash">contents of centos.local</span><br>      #####<br>      #[BaseOS]<br><span class="hljs-meta prompt_">#</span><span class="language-bash">name=BaseOS</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">baseurl=file:///run/media/<span class="hljs-variable">$name</span>/BaseOS</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">gpgcheck=0</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"></span><br><span class="language-bash">      <span class="hljs-comment">#[AppStream]</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">name=AppStream</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">baseurl=file:///run/media/<span class="hljs-variable">$name</span>/AppStream</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">gpgcheck=0</span><br>      #####<br>dnf repolist # confirm new repos are added<br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>Asghar Ghori - Exercise 10-2: Manipulate Individual Packages</p><ul><li>Determine if the <em>cifs-utils</em> package is installed and if it is available for installation. Display its information before installing it. Install the package and display its information again. Remove the package along with its dependencies and confirm the removal:  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">dnf config-manager --disable AppStream<br>dnf config-manager --disable BaseOS<br>dnf list installed | greps cifs-utils # confirm not installed<br>dnf info cifs-utils # display information<br>dnf install cifs-utils -y<br>dnf info cifs-utils # Repository now says @System<br>dnf remove cifs-utils -y<br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>Asghar Ghori - Exercise 10-3: Manipulate Package Groups</p><ul><li>Perform management operations on a package group called <em>system tools</em>. Determine if this group is already installed and if it is available for installation. List the packages it contains and install it. Remove the group along with its dependencies and confirm the removal:  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">dnf group list # shows System Tools as an available group<br>dnf group info &quot;System Tools&quot;<br>dnf group install &quot;System Tools&quot; -y<br>dnf group list &quot;System Tools&quot; # shows installed<br>dnf group remove &quot;System Tools&quot; -y<br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>Asghar Ghori - Exercise 10-4: Manipulate Modules</p><ul><li>Perform management operations on a module called <em>postgresql</em>. Determine if this module is already installed and if it is available for installation. Show its information and install the default profile for stream 10. Remove the module profile along with any dependencies and confirm its removal:  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">dnf module list &quot;postgresql&quot; # no [i] tag shown so not installed<br>dnf module info postgresql:10 # note there are multiple streams<br>sudo dnf module install --profile postgresql:10 -y<br>dnf module list &quot;postgresql&quot; # [i] tag shown so it&#x27;s installed<br>sudo dnf module remove postgresql:10 -y<br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>Asghar Ghori - Exercise 10-5: Install a Module from an Alternative Stream</p><ul><li>Downgrade a module to a lower version. Remove the stream <em>perl</em> 5.26 and confirm its removal. Manually enable the stream <em>perl</em> 5.24 and confirm its new status. Install the new version of the module and display its information:  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">dnf module list perl # 5.26 shown as installed<br>dnf module remove perl -y<br>dnf module reset perl # make no version enabled<br>dnf module install perl:5.26/minimal --allowerasing<br>dnf module list perl # confirm module installed<br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>Asghar Ghori - Exercise 11-1: Reset the root User Password</p><ul><li>Terminate the boot process at an early stage to access a debug shell to reset the root password:  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">add rd.break affter <span class="hljs-string">&quot;rhgb quiet&quot;</span> to reboot into debug shell</span><br>mount -o remount, rw /sysroot<br>chroot /sysroot<br>passwd # change password<br>touch /.autorelabel<br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>Asghar Ghori - Exercise 11-2: Download and Install a New Kernel</p><ul><li>Download the latest available kernel packages from the Red Hat Customer Portal and install them:  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">uname -r # view kernel version<br>rpm -qa | grep &quot;kernel&quot;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">find versions on access.redhat website, download and move to /tmp</span><br>sudo dnf install /tmp/kernel* -y<br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>Asghar Ghori - Exercise 12-1: Manage Tuning Profiles</p><ul><li>Install the <em>tuned</em> service, start it and enable it for auto-restart upon reboot. Display all available profiles and the current active profile. Switch to one of the available profiles and confirm. Determine the recommended profile for the system and switch to it. Deactive tuning and reactivate it:  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">sudo systemctl status tuned-adm # already installed and enabled<br>sudo tuned-adm profile # active profile is virtual-guest<br>sudo tuned-adm profile desktop # switch to desktop profile<br>sudo tuned-adm profile recommend # virtual-guest is recommended<br>sudo tuned-adm off # turn off profile<br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>Asghar Ghori - Exercise 13-1: Add Required Storage to server2</p><ul><li>Add 4x250MB, 1x4GB, and 2x1GB disks:  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-keyword">in</span> virtual box add a VDI disk to the SATA controller</span><br>lsblk # added disks shown as sdb, sdc, sdd<br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>Asghar Ghori - Exercise 13-2: Create an MBR Partition</p><ul><li>Assign partition type “msdos” to <code>/dev/sdb</code> for using it as an MBR disk. Create and confirm a 100MB primary partition on the disk:  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">parted /dev/sdb print # first line shows unrecognised disk label<br>parted /dev/sdb mklabel msdos<br>parted /dev/sdb mkpart primary 1m 101m<br>parted /dev/sdb print # confirm added partition<br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>Asghar Ghori - Exercise 13-3: Delete an MBR Partition</p><ul><li>Delete the <em>sdb1</em> partition that was created in Exercise 13-2 above:  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">parted /dev/sdb rm 1<br>parted /dev/sdb print # confirm deletion<br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>Asghar Ghori - Exercise 13-4: Create a GPT Partition</p><ul><li>Assign partition type “gpt” to <code>/dev/sdc</code> for using it as a GPT disk. Create and confirm a 200MB partition on the disk:  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">gdisk /dev/sdc<br><span class="hljs-meta prompt_"># </span><span class="language-bash">enter n <span class="hljs-keyword">for</span> new</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">enter default partition number</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">enter default first sector</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">enter +200MB <span class="hljs-keyword">for</span> last sector</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">enter default file system <span class="hljs-built_in">type</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">enter default hex code</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">enter w to write</span><br>lsblk # can see sdc1 partition with 200M<br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>Asghar Ghori - Exercise 13-5: Delete a GPT Partition</p><ul><li>Delete the <em>sdc1</em> partition that was created in Exercise 13-4 above:  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">gdisk /dev/sdc<br><span class="hljs-meta prompt_"># </span><span class="language-bash">enter d <span class="hljs-keyword">for</span> delete</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">enter w to write</span><br>lsblk # can see no partitions under sdc<br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>Asghar Ghori - Exercise 13-6: Install Software and Activate VDO</p><ul><li>Install the VDO software packages, start the VDO services, and mark it for autostart on subsequent reboots:  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">dnf install vdo kmod-kvdo -y<br>systemctl start vdo.service &amp; systemctl enable vdo.service<br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>Asghar Ghori - Exercise 13-7: Create a VDO Volume</p><ul><li>Create a volume called <em>vdo-vol1</em> of logical size 16GB on the <code>/dev/sdc</code> disk (the actual size of <code>/dev/sdc</code> is 4GB). List the volume and display its status information. Show the activation status of the compression and de-duplication features:  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">wipefs -a /dev/sdc # couldn&#x27;t create without doing this first<br>vdo create --name vdo-vol1 --device /dev/sdc --vdoLogicalSize 16G --vdoSlabSize 128<br><span class="hljs-meta prompt_"># </span><span class="language-bash">VDO instance 0 volume is ready at /dev/mapper/vdo-vol1</span><br>lsblk # confirm vdo-vol1 added below sdc<br>vdo list # returns vdo-vol1<br>vdo status --name vdo-vol1 # shows status<br>vdo status --name vdo-vol1 | grep -i &quot;compression&quot; # enabled<br>vdo status --name vdo-vol1 | grep -i &quot;deduplication&quot; # enabled<br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>Asghar Ghori - Exercise 13-8: Delete a VDO Volume</p><ul><li>Delete the <em>vdo-vol1</em> volume that was created in Exercise 13-7 above and confirm the removal:  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">vdo remove --name vdo-vol1<br>vdo list # confirm removal<br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>Asghar Ghori - Exercise 14-1: Create a Physical Volume and Volume Group</p><ul><li>Initialise one partition <em>sdd1</em> (90MB) and one disk <em>sdb</em> (250MB) for use in LVM. Create a volume group called <em>vgbook</em> and add both physical volumes to it. Use the PE size of 16MB and list and display the volume group and the physical volumes:  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">parted /dev/sdd mklabel msdos<br>parted /dev/sdd mkpart primary 1m 91m<br>parted /dev/sdd set 1 lvm on<br>pvcreate /dev/sdd1 /dev/sdb<br>vgcreate -vs 16 vgbook /dev/sdd1 /dev/sdb<br>vgs vgbook # list information about vgbook<br>vgdisplay -v vbook # list detailed information about vgbook<br>pvs # list information about pvs<br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>Asghar Ghori - Exercise 14-2: Create Logical Volumes</p><ul><li>Create two logical volumes, <em>lvol0</em> and <em>lvbook1</em>, in the <em>vgbook</em> volume group. Use 120MB for <em>lvol0</em> and 192MB for <em>lvbook1</em>. Display the details of the volume group and the logical volumes:  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">lvcreate -vL 120M vgbook<br>lvcreate -vL 192M -n lvbook1 vgbook<br>lvs # display information<br>vgdisplay -v vgbook # display detailed information about volume group<br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>Asghar Ghori - Exercise 14-3: Extend a Volume Group and a Logical Volume</p><ul><li>Add another partition <em>sdd2</em> of size 158MB to <em>vgbook</em> to increase the pool of allocatable space. Initialise the new partition prior to adding it to the volume group. Increase the size of <em>lvbook1</em> to 336MB. Display the basic information for the physical volumes, volume group, and logical volume:  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">parted mkpart /dev/sdd primary 90 250<br>parted /dev/sdd set 2 lvm on<br>parted /dev/sdd print # confirm new partition added<br>vgextend vgbook /dev/sdd2<br>pvs # display information<br>vgs # display information<br>lvextend vgbook/lvbook1 -L +144M<br>lvs # display information<br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>Asghar Ghori - Exercise 14-4: Rename, Reduce, Extend, and Remove Logical Volumes</p><ul><li>Rename <em>lvol0</em> to <em>lvbook2</em>. Decrease the size of <em>lvbook2</em> to 50MB using the <em>lvreduce</em> command and then add 32MB with the <em>lvresize</em> command. Remove both logical volumes. Display the summary for the volume groups, logical volumes, and physical volumes:  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">lvrename vgbook/lvol0 vgbook/lvbook2<br>lvreduce vgbook/lvbook2 -L 50M<br>lvextend vgbook/lvbook2 -L +32M<br>lvremove vgbook/lvbook1<br>lvremove vgbook/lvbook2<br>pvs # display information<br>vgs # display information<br>lvs # display information<br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>Asghar Ghori - Exercise 14-5: Reduce and Remove a Volume Group</p><ul><li>Reduce <em>vgbook</em> by removing the <em>sdd1</em> and <em>sdd2</em> physical volumes from it, then remove the volume group. Confirm the deletion of the volume group and the logical volumes at the end:  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">vgreduce vgbook /dev/sdd1 /dev/sdd2<br>vgremove vgbook<br>vgs # confirm removals<br>pvs # can be used to show output of vgreduce<br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>Asghar Ghori - Exercise 14-5: Reduce and Remove a Volume Group</p><ul><li>Reduce <em>vgbook</em> by removing the <em>sdd1</em> and <em>sdd2</em> physical volumes from it, then remove the volume group. Confirm the deletion of the volume group and the logical volumes at the end:  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">vgreduce vgbook /dev/sdd1 /dev/sdd2<br>vgremove vgbook<br>vgs # confirm removals<br>pvs # can be used to show output of vgreduce<br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>Asghar Ghori - Exercise 14-6: Uninitialise Physical Volumes</p><ul><li>Uninitialise all three physical volumes - <em>sdd1</em>, <em>sdd2</em>, and <em>sdb</em> - by deleting the LVM structural information from them. Use the <em>pvs</em> command for confirmation. Remove the partitions from the <em>sdd</em> disk and verify that all disks are now in their original raw state:  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">pvremove /dev/sdd1 /dev/sdd2 /dev/sdb<br>pvs<br>parted /dev/sdd<br><span class="hljs-meta prompt_"># </span><span class="language-bash">enter <span class="hljs-built_in">print</span> to view partitions</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">enter <span class="hljs-built_in">rm</span> 1</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">enter <span class="hljs-built_in">rm</span> 2</span><br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>Asghar Ghori - Exercise 14-7: Install Software and Activate Stratis</p><ul><li>Install the Stratis software packages, start the Stratis service, and mark it for autostart on subsequent system reboots:  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">dnf install stratis-cli -y<br>systemctl start stratisd.service &amp; systemctl enable stratisd.service<br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>Asghar Ghori - Exercise 14-8: Create and Confirm a Pool and File System</p><ul><li>Create a Stratis pool and a file system in it. Display information about the pool, file system, and device used:  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">stratis pool create mypool /dev/sdd<br>stratis pool list # confirm stratis pool created<br>stratis filesystem create mypool myfs<br>stratis filesystem list # confirm filesystem created, get device path<br>mkdir /myfs1<br>mount /stratis/mypool/myfs /myfs1<br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>Asghar Ghori - Exercise 14-9: Expand and Rename a Pool and File System</p><ul><li>Expand the Stratis pool <em>mypool</em> using the <em>sdd</em> disk. Rename the pool and the file system it contains:  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">stratis pool add-data mypool /dev/sdd<br>stratis pool rename mypool mynewpool<br>stratis pool list # confirm changes<br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>Asghar Ghori - Exercise 14-10: Destroy a File System and Pool</p><ul><li>Destroy the Stratis file system and the pool that was created, expanded, and renamed in the above exercises. Verify the deletion with appropriate commands:  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">umount /bookfs1<br>stratis filesystem destroy mynewpool myfs<br>stratis filesystem list # confirm deletion<br>stratis pool destroy mynewpool<br>stratis pool list # confirm deletion<br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>Asghar Ghori - Exercise 15-1: Create and Mount Ext4, VFAT, and XFS File Systems in Partitions</p><ul><li>Create 2x100MB partitions on the <code>/dev/sdb</code> disk, initialise them separately with the Ext4 and VFAT file system types, define them for persistence using their UUIDs, create mount points called <code>/ext4fs</code> and <code>/vfatfs1</code>, attach them to the directory structure, and verify their availability and usage. Use the disk <code>/dev/sdc</code> and repeat the above procedure to establish an XFS file system in it and mount it on <code>/xfsfs1</code>:  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">parted /dev/sdb<br><span class="hljs-meta prompt_"># </span><span class="language-bash">enter mklabel</span> <br><span class="hljs-meta prompt_"># </span><span class="language-bash">enter msdos</span> <br><span class="hljs-meta prompt_"># </span><span class="language-bash">enter mkpart</span> <br><span class="hljs-meta prompt_"># </span><span class="language-bash">enter primary</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">enter ext4</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">enter start as 0</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">enter end as 100MB</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">enter <span class="hljs-built_in">print</span> to verify</span><br>parted /dev/sdb mkpart primary 101MB 201MB<br><span class="hljs-meta prompt_"># </span><span class="language-bash">file system entered during partition created is different</span><br>lsblk # verify partitions<br>mkfs.ext4 /dev/sdb1<br>mkfs.vfat /dev/sdb2<br>parted /dev/sdc<br><span class="hljs-meta prompt_"># </span><span class="language-bash">enter mklabel</span> <br><span class="hljs-meta prompt_"># </span><span class="language-bash">enter msdos</span> <br><span class="hljs-meta prompt_"># </span><span class="language-bash">enter mkpart</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">enter primary</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">enter xfs</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">enter start as 0</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">enter end as 100MB</span><br>mkfs.xfs /dev/sdc1<br>mkdir /ext4fs /vfatfs1 /xfsfs1<br>lsblk -f # get UUID for each file system<br>vi /etc/fstab<br><span class="hljs-meta prompt_"># </span><span class="language-bash">add entries using UUIDs with defaults and file system name</span><br>df -hT # view file systems and mount points<br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>Asghar Ghori - Exercise 15-2: Create and Mount XFS File System in VDO Volume</p><ul><li>Create a VDO volume called <em>vdo1</em> of logical size 16GB on the <em>sdc</em> disk (actual size 4GB). Initialise the volume with the XFS file system type, define it for persistence using its device files, create a mount point called <code>/xfsvdo1</code>, attach it to the directory structure, and verify its availability and usage:  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">wipefs -a /dev/sdc<br>vdo create --device /dev/sdc --vdoLogicalSize 16G --name vdo1 --vdoSlabSize 128<br>vdo list # list the vdo<br>lsblk /dev/sdc # show information about disk<br>mkdir /xfsvdo1<br>vdo status # get vdo path<br>mkfs.xfs /dev/mapper/vdo1<br>vi /etc/fstab<br><span class="hljs-meta prompt_"># </span><span class="language-bash">copy example from man vdo create</span><br>mount -a<br>df -hT # view file systems and mount points<br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>Asghar Ghori - Exercise 15-3: Create and Mount Ext4 and XFS File Systems in LVM Logical Volumes</p><ul><li>Create a volume group called <em>vgfs</em> comprised of a 160MB physical volume created in a partition on the <code>/dev/sdd</code> disk. The PE size for the volume group should be set at 16MB. Create 2 logical volumes called <em>ext4vol</em> and <em>xfsvol</em> of sizes 80MB each and initialise them with the Ext4 and XFS file system types. Ensure that both file systems are persistently defined using their logical volume device filenames. Create mount points <em>&#x2F;ext4fs2</em> and <em>&#x2F;xfsfs2</em>, mount the file systems, and verify their availability and usage:  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">vgcreate vgfs /dev/sdd --physicalextentsize 16MB<br>lvcreate vgfs --name ext4vol -L 80MB<br>lvcreate vgfs --name xfsvol -L 80MB<br>mkfs.ext4 /dev/vgfs/ext4vol<br>mkfs.xfs /dev/vgfs/xfsvol<br>blkid # copy UUID for /dev/mapper/vgfs-ext4vol and /dev/mapper/vgfs-xfsvol<br>vi /etc/fstab<br><span class="hljs-meta prompt_"># </span><span class="language-bash">add lines with copied UUID</span><br>mount -a<br>df -hT # confirm added<br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>Asghar Ghori - Exercise 15-4: Resize Ext4 and XFS File Systems in LVM Logical Volumes</p><ul><li>Grow the size of the <em>vgfs</em> volume group that was created above by adding the whole <em>sdc</em> disk to it. Extend the <em>ext4vol</em> logical volume along with the file system it contains by 40MB using 2 separate commands. Extend the <em>xfsvol</em> logical volume along with the file system it contains by 40MB using a single command:  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">vdo remove --name vdo1 # need to use this disk<br>vgextend vgfs /dev/sdc<br>lvextend -L +80 /dev/vgfs/ext4vol<br>fsadm resize /dev/vgfs/ext4vol<br>lvextend -L +80 /dev/vgfs/xfsvol<br>fsadm resize /dev/vgfs/xfsvol<br>lvresize -r -L +40 /dev/vgfs/xfsvol # -r resizes file system<br>lvs # confirm resizing<br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>Asghar Ghori - Exercise 15-5: Create, Mount, and Expand XFS File System in Stratis Volume</p><ul><li>Create a Stratis pool called <em>strpool</em> and a file system <em>strfs2</em> by reusing the 1GB <em>sdc</em> disk. Display information about the pool, file system, and device used. Expand the pool to include another 1GB disk <em>sdh</em> and confirm:  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">stratis pool create strpool /dev/sdc<br>stratis filesystem create strpool strfs2<br>stratis pool list # view created stratis pool<br>stratis filesystem list # view created filesystem<br>stratis pool add-data strpool /dev/sdd<br>stratis blockdev list strpool # list block devices in pool<br>mkdir /strfs2<br>lsblk /stratis/strpool/strfs2 -o UUID<br>vi /etc/fstab<br><span class="hljs-meta prompt_"># </span><span class="language-bash">add line</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">UUID=2913810d-baed-4544-aced-a6a2c21191fe /strfs2 xfs x-systemd.requires=stratisd.service 0 0</span><br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>Asghar Ghori - Exercise 15-6: Create and Activate Swap in Partition and Logical Volume</p><ul><li>Create 1 swap area in a new 40MB partition called <em>sdc3</em> using the <em>mkswap</em> command. Create another swap area in a 140MB logical volume called <em>swapvol</em> in <em>vgfs</em>. Add their entries to the <code>/etc/fstab</code> file for persistence. Use the UUID and priority 1 for the partition swap and the device file and priority 2 for the logical volume swap. Activate them and use appropriate tools to validate the activation:  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">parted /dev/sdc<br><span class="hljs-meta prompt_"># </span><span class="language-bash">enter mklabel msdos</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">enter mkpart primary 0 40</span><br>parted /dev/sdd<br><span class="hljs-meta prompt_"># </span><span class="language-bash">enter mklabel msdos</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">enter mkpart primary 0 140</span><br>mkswap -L sdc3 /dev/sdc 40<br>vgcreate vgfs /dev/sdd1<br>lvcreate vgfs --name swapvol -L 132<br>mkswap swapvol /dev/sdd1<br>mkswap /dev/vgfs/swapvol<br>lsblk -f # get UUID<br>vi /etc/fstab<br><span class="hljs-meta prompt_"># </span><span class="language-bash">add 2 lines, e.g. first line</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">UUID=WzDb5Y-QMtj-fYeo-iW0f-sj8I-ShRu-EWRIcp swap swap pri=2 0 0</span><br>mount -a<br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>Asghar Ghori - Exercise 16-1: Export Share on NFS Server</p><ul><li>Create a directory called <code>/common</code> and export it to <em>server1</em> in read&#x2F;write mode. Ensure that NFS traffic is allowed through the firewall. Confirm the export:  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">dnf install nfs-utils -y<br>mkdir /common<br>firewall-cmd --permanent --add-service=nfs<br>firewall-cmd --reload<br>systemctl start nfs-server.service &amp; systemctl enable nfs-server.service<br>echo &quot;/nfs *(rw)&quot; &gt;&gt; /etc/exports<br>exportfs -av<br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>Asghar Ghori - Exercise 16-2: Mount Share on NFS Client</p><ul><li>Mount the <code>/common</code> share exported above. Create a mount point called <code>/local</code>, mount the remote share manually, and confirm the mount. Add the remote share to the file system table for persistence. Remount the share and confirm the mount. Create a test file in the mount point and confirm the file creation on the NFS server:  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">dnf install cifs-utils -y<br>mkdir /local<br>chmod 755 local<br>mount 10.0.2.15:/common /local<br>vi /etc/fstab<br><span class="hljs-meta prompt_"># </span><span class="language-bash">add line</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">10.0.2.15:/common /local nfs _netdev 0 0</span><br>mount -a<br>touch /local/test # confirm that it appears on server in common<br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>Asghar Ghori - Exercise 16-3: Access NFS Share Using Direct Map</p><ul><li>Configure a direct map to automount the NFS share <code>/common</code> that is available from <em>server2</em>. Install the relevant software, create a local mount point <code>/autodir</code>, and set up AutoFS maps to support the automatic mounting. Note that <code>/common</code> is already mounted on the <code>/local</code> mount point on <em>server1</em> via <em>fstab</em>. Ensure there is no conflict in configuration or functionality between the 2:  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">dnf install autofs -y<br>mkdir /autodir<br>vi /etc/auto.master<br><span class="hljs-meta prompt_"># </span><span class="language-bash">add line</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">/- /etc/auto.master.d/auto.dir</span><br>vi /etc/auto.master.d/auto.dir<br><span class="hljs-meta prompt_"># </span><span class="language-bash">add line</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">/autodir 172.25.1.4:/common</span><br>systemctl restart autofs<br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>Asghar Ghori - Exercise 16-4: Access NFS Share Using Indirect Map</p><ul><li>Configure an indirect map to automount the NFS share <code>/common</code> that is available from <em>server2</em>. Install the relevant software and set up AutoFS maps to support the automatic mounting. Observe that the specified mount point “autoindir” is created automatically under <code>/misc</code>. Note that <code>/common</code> is already mounted on the <code>/local</code> mount point on <em>server1</em> via <em>fstab</em>. Ensure there is no conflict in configuration or functionality between the 2:  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">dnf install autofs -y<br>grep /misc /etc/auto.master # confirm entry is there<br>vi /etc/auto.misc<br><span class="hljs-meta prompt_"># </span><span class="language-bash">add line</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">autoindir 172.25.1.4:/common</span><br>systemctl restart autofs<br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>Asghar Ghori - Exercise 16-5: Automount User Home Directories Using Indirect Map</p><ul><li>On <em>server1</em> (NFS server), create a user account called <em>user30</em> with UID 3000. Add the <code>/home</code> directory to the list of NFS shares so that it becomes available for remote mount. On <em>server2</em> (NFS client), create a user account called <em>user30</em> with UID 3000, base directory <code>/nfshome</code>, and no user home directory. Create an umbrella mount point called <code>/nfshome</code> for mounting the user home directory from the NFS server. Install the relevent software and establish an indirect map to automount the remote home directory of <em>user30</em> under <code>/nfshome</code>. Observe that the home directory of <em>user30</em> is automounted under <code>/nfshome</code> when you sign in as <em>user30</em>:  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">on server 1 (NFS server)</span><br>useradd -u 3000 user30<br>echo password1 | passwd --stdin user30<br>vi /etc/exports<br><span class="hljs-meta prompt_"># </span><span class="language-bash">add line</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">/home *(rw)</span><br>exportfs -avr<br>      <br><span class="hljs-meta prompt_"># </span><span class="language-bash">on server 2 (NFS client)</span><br>dnf install autofs -y<br>useradd user30 -u 3000 -Mb /nfshome<br>echo password1 | passwd --stdin user30<br>mkdir /nfshome<br>vi /etc/auto.master<br><span class="hljs-meta prompt_"># </span><span class="language-bash">add line</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">/nfshome /etc/auto.master.d/auto.home</span><br>vi /etc/auto.master.d/auto.home<br><span class="hljs-meta prompt_"># </span><span class="language-bash">add line</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">* -rw &amp;:/home&amp;</span><br>systemctl enable autofs.service &amp; systemctl start autofs.service<br>sudo su - user30<br><span class="hljs-meta prompt_"># </span><span class="language-bash">confirm home directory is mounted</span><br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>Asghar Ghori - Exercise 17.1: Change System Hostname</p><ul><li>Change the hostnames of <em>server1</em> to <em>server10.example.com</em> and <em>server2</em> to <em>server20.example.com</em> by editing a file and restarting the corresponding service daemon and using a command respectively:  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">on server 1</span><br>vi /etc/hostname<br><span class="hljs-meta prompt_"># </span><span class="language-bash">change line to server10.example.com</span><br>systemctl restart systemd-hostnamed<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">on server 2</span><br>hostnamectl set-hostname server20.example.com<br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>Asghar Ghori - Exercise 17.2: Add Network Devices to server10 and server20</p><ul><li>Add one network interface to <em>server10</em> and one to <em>server20</em> using VirtualBox:  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">A NAT Network has already been created and attached to both servers <span class="hljs-keyword">in</span> VirtualBox to allow them to have seperate IP addresses (note that the MAC addressed had to be changed)</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Add a second Internal Network adapter named intnet to each server</span><br>nmcli conn show # observe enp0s8 added as a connection<br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>Asghar Ghori - Exercise 17.3: Configure New Network Connection Manually</p><ul><li>Create a connection profile for the new network interface on <em>server10</em> using a text editing tool. Assign the IP 172.10.10.110&#x2F;24 with gateway 172.10.10.1 and set it to autoactivate at system reboots. Deactivate and reactive this interface at the command prompt:  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">vi /etc/sysconfig/network-scripts/ifcfg-enp0s8<br><span class="hljs-meta prompt_"># </span><span class="language-bash">add contents of file</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">TYPE=Ethernet</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">BOOTPROTO=static</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">IPV4_FAILURE_FATAL=no</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">IPV6INIT=no</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">NAME=enp0s8</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">DEVICE=enp0s8</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">ONBOOT=<span class="hljs-built_in">yes</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">IPADDR=172.10.10.110</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">PREFIX=24</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">GATEWAY=172.10.10.1</span><br>ifdown enp0s8<br>ifup enp0s8<br>ip a # verify activation<br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>Asghar Ghori - Exercise 17.4: Configure New Network Connection Using nmcli</p><ul><li>Create a connection profile using the <em>nmcli</em> command for the new network interface enp0s8 that was added to <em>server20</em>. Assign the IP 172.10.10.120&#x2F;24 with gateway 172.10.10.1, and set it to autoactivate at system reboot. Deactivate and reactivate this interface at the command prompt:  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">nmcli dev status # show devices with enp0s8 disconnected<br>nmcli con add type Ethernet ifname enp0s8 con-name enp0s8 ip4 172.10.10.120/24 gw4 172.10.10.1<br>nmcli conn show # verify connection added<br>nmcli con down enp0s8<br>nmcli con up enp0s8<br>ip a # confirm ip address is as specified<br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>Asghar Ghori - Exercise 17.5: Update Hosts Table and Test Connectivity</p><ul><li>Update the <code>/etc/hosts</code> file on both <em>server10</em> and <em>server20</em>. Add the IP addresses assigned to both connections and map them to hostnames <em>server10</em>, <em>server10s8</em>, <em>server20</em>, and <em>server20s8</em> appropriately. Test connectivity from <em>server10</em> to <em>server20</em> to and from <em>server10s8</em> to <em>server20s8</em> using their IP addresses and then their hostnames:  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># on server20</span></span><br>vi /etc/hosts<br><span class="hljs-meta prompt_"># </span><span class="language-bash">add lines</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">172.10.10.120 server20.example.com server20</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">172.10.10.120 server20s8.example.com server20s8</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">192.168.0.110 server10.example.com server10</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">192.168.0.110 server10s8.example.com server10s8</span><br>      <br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># on server10</span></span><br>vi /etc/hosts<br><span class="hljs-meta prompt_"># </span><span class="language-bash">add lines</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">172.10.10.120 server20.example.com server20</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">172.10.10.120 server20s8.example.com server20s8</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">192.168.0.110 server10.example.com server10</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">192.168.0.110 server10s8.example.com server10s8</span><br>ping server10 # confirm host name resolves<br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>Asghar Ghori - Exercise 18.1: Configure NTP Client</p><ul><li>Install the Chrony software package and activate the service without making any changes to the default configuration. Validate the binding and operation:  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">dnf install chrony -y<br>vi /etc/chrony.conf # view default configuration<br>systemctl start chronyd.service &amp; systemctl enable chronyd.service<br>chronyc sources # view time sources<br>chronyc tracking # view clock performance<br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>Asghar Ghori - Exercise 19.1: Access RHEL System from Another RHEL System</p><ul><li>Issue the <em>ssh</em> command as <em>user1</em> on <em>server10</em> to log in to <em>server20</em>. Run appropriate commands on <em>server20</em> for validation. Log off and return to the originating system:  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">on server 10</span><br>ssh user1@server20<br>whoami<br>pwd<br>hostname # check some basic information<br><span class="hljs-meta prompt_"># </span><span class="language-bash">ctrl + D to <span class="hljs-built_in">logout</span></span><br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>Asghar Ghori - Exercise 19.2: Access RHEL System from Windows</p><ul><li>Use a program called PuTTY to access <em>server20</em> using its IP address and as <em>user1</em>. Run appropriate commands on <em>server20</em> for validation. Log off to terminate the session:  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">as above but using the server20 IP address <span class="hljs-keyword">in</span> PuTTy</span><br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>Asghar Ghori - Exercise 19.3: Generate, Distribute, and Use SSH Keys</p><ul><li>Generate a password-less ssh key pair using RSA for <em>user1</em> on <em>server10</em>. Display the private and public file contents. Distribute the public key to <em>server20</em> and attempt to log on to <em>server20</em> from <em>server10</em>. Show the log file message for the login attempt:  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">on server10</span><br>ssh-keygen<br><span class="hljs-meta prompt_"># </span><span class="language-bash">press enter to select default file names and no password</span><br>ssh-copy-id server20<br>ssh server20 # confirm you can login<br>      <br><span class="hljs-meta prompt_"># </span><span class="language-bash">on server20</span><br>vi /var/log/secure # view login event<br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>Asghar Ghori - Exercise 20.1: Add Services and Ports, and Manage Zones</p><ul><li>Determine the current active zone. Add and activate a permanent rule to allow HTTP traffic on port 80, and then add a runtime rule for traffic intended for TCP port 443. Add a permanent rule to the <em>internal</em> zone for TCP port range 5901 to 5910. Confirm the changes and display the contents of the affected zone files. Switch the default zone to the <em>internal</em> zone and activate it:  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">on server10</span><br>firewall-cmd --get-active-zones # returns public with enp0s8 interface<br>firewall-cmd --add-service=http --permanent<br>firewall-cmd --add-service=https<br>firewall-cmd --add-port=80/tcp --permanent<br>firewall-cmd --add-port=443/tcp<br>firewall-cmd --zone=internal --add-port=5901-5910/tcp --permanent<br>firewall-cmd --reload<br>firewall-cmd --list-services # confirm result<br>firewall-cmd --list-ports # confirm result<br>vi /etc/firewalld/zones/public.xml # view configuration<br>vi /etc/firewalld/zones/internal.xml # view configuration<br>firewall-cmd --set-default-zone=internal<br>firewall-cmd --reload<br>firewall-cmd --get-active-zones # returns internal with enp0s8 interface<br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>Asghar Ghori - Exercise 20.2: Remove Services and Ports, and Manage Zones</p><ul><li>Remove the 2 permanent rules added above. Switch back to the <em>public</em> zone as the default zone, and confirm the changes:  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">firewall-cmd --set-default-zone=public<br>firewall-cmd --remove-service=http --permanent<br>firewall-cmd --remove-port=80/tcp --permanent<br>firewall-cmd --reload<br>firewall-cmd --list-services # confirm result<br>firewall-cmd --list-ports # confirm result<br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>Asghar Ghori - Exercise 20.3: Test the Effect of Firewall Rule</p><ul><li>Remove the <em>sshd</em> service rule from the runtime configuration on <em>server10</em>, and try to access the server from <em>server20</em> using the <em>ssh</em> command:  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">on server10</span><br>firewall-cmd --remove-service=ssh --permanent<br>firewall-cmd --reload<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">on server20</span><br>ssh user1@server10<br><span class="hljs-meta prompt_"># </span><span class="language-bash">no route to host message displayed</span><br>      <br><span class="hljs-meta prompt_"># </span><span class="language-bash">on server10</span><br>firewall-cmd --add-service=ssh --permanent<br>firewall-cmd --reload<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">on server20</span><br>ssh user1@server10<br><span class="hljs-meta prompt_"># </span><span class="language-bash">success</span><br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>Asghar Ghori - Exercise 21.1: Modify SELinux File Context</p><ul><li>Create a directory <em>sedir1</em> under <code>/tmp</code> and a file <em>sefile1</em> under <em>sedir1</em>. Check the context on the directory and file. Change the SELinux user and type to user_u and public_content_t on both and verify:  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">mkdir /tmp/sedir1<br>touch /tmp/sedir1/sefile1<br>cd /tmp/sedir1<br>ll -Z # unconfined_u:object_r:user_tmp_t:s0 shown<br>chcon -u user_u -R sedir1<br>chcon -t public_content_t -R sedir1<br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>Asghar Ghori - Exercise 21.2: Add and Apply File Context</p><ul><li>Add the current context on <em>sedir1</em> to the SELinux policy database to ensure a relabeling will not reset it to its previous value. Next, you will change the context on the directory to some random values. Restore the default context from the policy database back to the directory recursively:  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">semanage fcontext -a -t public_content_t -s user_u &#x27;/tmp/sedir1(/.*)?&#x27;<br>cat /etc/selinux/targeted/contexts/files/file_contexts.local # view recently added policies<br>restorecon -Rv sedir1 # any chcon changes are reverted with this<br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>Asghar Ghori - Exercise 21.3: Add and Delete Network Ports</p><ul><li>Add a non-standard port 8010 to the SELinux policy database for the <em>httpd</em> service and confirm the addition. Remove the port from the policy and verify the deletion:  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">semanage port -a -t http_port_t -p tcp 8010<br>semanage port -l | grep http # list all port settings<br>semanage port -d -t http_port_t -p tcp 8010<br>semanage port -l | grep http<br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>Asghar Ghori - Exercise 21.4: Copy Files with and without Context</p><ul><li>Create a file called <em>sefile2</em> under <code>/tmp</code> and display its context. Copy this file to the <code>/etc/default</code> directory, and observe the change in the context. Remove <em>sefile2</em> from <code>/etc/default</code>, and copy it again to the same destination, ensuring that the target file receives the source file’s context:  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">cd /tmp<br>touch sefile2<br>ll -Zrt # sefile2 context is unconfined_u:object_r:user_tmp_t:s0<br>cp sefile2 /etc/default<br>cd /etc/default<br>ll -Zrt # sefile2 context is unconfined_u:object_r:etc_t:s0<br>rm /etc/default/sefile2<br>cp /tmp/sefile2 /etc/default/sefile2 --preserve=context<br>ll -Zrt # sefile2 context is unconfined_u:object_r:user_tmp_t:s0<br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>Asghar Ghori - Exercise 21.5: View and Toggle SELinux Boolean Values</p><ul><li>Display the current state of the Boolean nfs_export_all_rw. Toggle its value temporarily, and reboot the system. Flip its value persistently after the system has been back up:  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">getsebool nfs_export_all_rw # nfs_export_all_rw --&gt; on<br>sestatus -b | grep nfs_export_all_rw # also works<br>setsebool nfs_export_all_rw_off<br>reboot<br>setsebool nfs_export_all_rw_off -P<br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>Prince Bajaj - Managing Containers</p><ul><li><p>Download the Apache web server container image (httpd 2.4) and inspect the container image. Check the exposed ports in the container image configuration:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">as root</span><br>usermod user1 -aG wheel<br>cat /etc/groups | grep wheel # confirm<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">as user1</span><br>podman search httpd # get connection refused<br><span class="hljs-meta prompt_"># </span><span class="language-bash">this was because your VM was setup as an Internal Network and not a NAT network so it couldn<span class="hljs-string">&#x27;t access the internet</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-string">see result registry.access.redhat.com/rhscl/httpd-24-rhel7</span></span><br>skopeo inspect --creds name:password docker://registry.access.redhat.com/rhscl/httpd-24-rhel7<br>podman pull registry.access.redhat.com/rhscl/httpd-24-rhel7<br>podman inspect registry.access.redhat.com/rhscl/httpd-24-rhel7<br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-string">exposed ports shown as 8080 and 8443</span></span><br></code></pre></div></td></tr></table></figure></li><li><p>Run the httpd container in the background. Assign the name <em>myweb</em> to the container, verify that the container is running, stop the container and verify that it has stopped, and delete the container and the container image:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">podman run --name myweb -d registry.access.redhat.com/rhscl/httpd-24-rhel7<br>podman ps # view running containers<br>podman stop myweb<br>podman ps # view running containers<br>podman rm myweb<br>podman rmi registry.access.redhat.com/rhscl/httpd-24-rhel7<br></code></pre></div></td></tr></table></figure></li><li><p>Pull the Apache web server container image (httpd 2.4) and run the container with the name <em>webserver</em>. Configure <em>webserver</em> to display content “Welcome to container-based web server”. Use port 3333 on the host machine to receive http requests. Start a bash shell in the container to verify the configuration:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">as root</span><br>dnf install httpd -y<br>vi /var/www/html/index.html<br><span class="hljs-meta prompt_"># </span><span class="language-bash">add row <span class="hljs-string">&quot;Welcome to container-based web server&quot;</span></span><br>      <br><span class="hljs-meta prompt_"># </span><span class="language-bash">as user1</span><br>podman search httpd<br>podman pull registry.access.redhat.com/rhscl/httpd-24-rhel7<br>podman inspect registry.access.redhat.com/rhscl/httpd-24-rhel7 # shows 8080 in exposedPorts, and /opt/rh/httpd24/root/var/www is shown as HTTPD_DATA_ORIG_PATH <br>podman run -d=true -p 3333:8080 --name=webserver -v /var/www/html:/opt/rh/httpd24/root/var/www/html registry.access.redhat.com/rhscl/httpd-24-rhel7<br>curl http://localhost:3333 # success!<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">to go into the container and (<span class="hljs-keyword">for</span> e.g.) check the SELinux context</span><br>podman exec -it webserver /bin/bash<br>cd /opt/rh/httpd24/root/var/www/html<br>ls -ldZ<br>      <br><span class="hljs-meta prompt_"># </span><span class="language-bash">you can also just go to /var/www/html/index.html <span class="hljs-keyword">in</span> the container and change it there</span><br></code></pre></div></td></tr></table></figure></li><li><p>Configure the system to start the <em>webserver</em> container at boot as a systemd service. Start&#x2F;enable the systemd service to make sure the container will start at book, and reboot the system to verify if the container is running as expected:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">as root</span><br>podman pull registry.access.redhat.com/rhscl/httpd-24-rhel7<br>vi /var/www/html/index<br><span class="hljs-meta prompt_"># </span><span class="language-bash">add row <span class="hljs-string">&quot;Welcome to container-based web server&quot;</span></span><br>podman run -d=true -p 3333:8080/tcp --name=webserver -v /var/www/html:/opt/rh/httpd24/root/var/www/html registry.access.redhat.com/rhscl/httpd-24-rhel7<br>cd /etc/systemd/system<br>podman generate systemd webserver &gt;&gt; httpd-container.service<br>systemctl daemon-reload<br>systemctl enable httpd-container.service --now<br>reboot<br>systemctl status httpd-container.service<br>curl http://localhost:3333 # success<br>      <br><span class="hljs-meta prompt_"># </span><span class="language-bash">this can also be <span class="hljs-keyword">done</span> as a non-root user</span><br>podman pull registry.access.redhat.com/rhscl/httpd-24-rhel7<br>sudo vi /var/www/html/index.html<br><span class="hljs-meta prompt_"># </span><span class="language-bash">add row <span class="hljs-string">&quot;Welcome to container-based web server&quot;</span></span><br>sudo setsebool -P container_manage_cgroup true<br>podman run -d=true -p 3333:8080/tcp --name=webserver -v /var/www/html:/opt/rh/httpd24/root/var/www/html registry.access.redhat.com/rhscl/httpd-24-rhel7<br>podman generate systemd webserver &gt; /home/jr/.config/systemd/user/httpd-container.service<br>cd /home/jr/.config/systemd/user<br>sudo semanage fcontext -a -t systemd_unit_file_t httpd-container.service<br>sudo restorecon httpd-container.service<br>systemctl enable --user httpd-container.service --now<br></code></pre></div></td></tr></table></figure></li><li><p>Pull the <em>mariadb</em> image to your system and run it publishing the exposed port. Set the root password for the mariadb service as <em>mysql</em>. Verify if you can login as root from local host:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">as user1</span><br>sudo dnf install mysql -y<br>podman search mariadb<br>podman pull docker.io/library/mariadb<br>podman inspect docker.io/library/mariadb # ExposedPorts 3306 <br>podman run --name mariadb -d -p 3306:3306 -e MYSQL_ROOT_PASSWORD=mysql docker.io/library/mariadb<br>podman inspect mariadb # IPAddress is 10.88.0.22<br>mysql -h 10.88.0.22 -u root -p<br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>Linux Hint - Bash Script Examples</p><ul><li><p>Create a hello world script:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">!#/bin/bash<br>echo &quot;Hello World!&quot;<br>exit<br></code></pre></div></td></tr></table></figure></li><li><p>Create a script that uses a while loop to count to 5:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">!#/bin/bash<br>count=0<br>while [ $count -le 5 ]<br>do<br>echo &quot;$count&quot;<br>count = $(($count + 1))<br>done<br>exit<br></code></pre></div></td></tr></table></figure></li><li><p>Note the formatting requirements. For example, there can be no space between the equals and the variable names, there must be a space between the “]” and the condition, and there must be 2 sets of round brackets in the variable incrementation.</p></li><li><p>Create a script that uses a for loop to count to 5:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">!#/bin/bash<br>count=5<br>for ((i=1; i&lt;=$count; i++))<br>do<br>echo &quot;$i&quot;<br>done<br>exit<br></code></pre></div></td></tr></table></figure></li><li><p>Create a script that uses a for loop to count to 5 printing whether the number is even or odd:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">!#/bin/bash<br>count=5<br>for ((i=1; i&lt;=$count; i++))<br>do<br>if [ $(($i%2)) -eq 0 ]<br>then<br>echo &quot;$i is even&quot;<br>else<br>echo &quot;$i is odd&quot;<br>fi<br>done<br>exit<br></code></pre></div></td></tr></table></figure></li><li><p>Create a script that uses a for loop to count to a user defined number printing whether the number is even or odd:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">!#/bin/bash<br>echo &quot;Enter a number: &quot;<br>read count<br>for ((i=1; i&lt;=$count; i++))<br>do<br>if [ $(($i%2)) -eq 0 ]<br>then<br>echo &quot;$i is even&quot;<br>else<br>echo &quot;$i is odd&quot;<br>fi<br>done<br>exit<br></code></pre></div></td></tr></table></figure></li><li><p>Create a script that uses a function to multiply 2 numbers together:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">!#/bin/bash<br>Rectangle_Area() &#123;<br>area=$(($1 * $2))<br>echo &quot;Area is: $area&quot;<br>&#125;<br><br>Rectangle_Area 10 20<br>exit<br></code></pre></div></td></tr></table></figure></li><li><p>Create a script that uses the output of another command to make a decision:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">!#/bin/bash<br>ping -c 1 $1 &gt; /dev/null 2&gt;&amp;1<br>if [ $? -eq 0 ]<br>then<br>echo &quot;Connectivity to $1 established&quot;<br>else<br>echo &quot;Connectivity to $1 unavailable&quot;<br>fi<br>exit<br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>Asghar Ghori - Sample RHCSA Exam 1</p><ul><li><p>Setup a virtual machine RHEL 8 Server for GUI. Add a 10GB disk for the OS and use the default storage partitioning. Add 2 300MB disks. Add a network interface, but do not configure the hostname and network connection.</p></li><li><p>Assuming the root user password is lost, reboot the system and reset the root user password to root1234:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">ctrl + e after reboot</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">add rd.break after Linux line</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">ctrl + d</span><br>mount -o remount, rw /sysroot<br>chroot /sysroot<br>passwd<br><span class="hljs-meta prompt_"># </span><span class="language-bash">change password to root12345</span><br>touch /.autorelabel<br>exit<br>reboot<br></code></pre></div></td></tr></table></figure></li><li><p>Using a manual method (i.e. create&#x2F;modify files by hand), configure a network connection on the primary network device with IP address 192.168.0.241&#x2F;24, gateway 192.168.0.1, and nameserver 192.168.0.1:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">vi /etc/sysconfig/network-scripts/ifcfg-enp0s3<br>systemctl restart NetworkManager.service<br><span class="hljs-meta prompt_"># </span><span class="language-bash">add line IPADDR=192.168.0.241</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">add line GATEWAY=192.168.0.1</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">add line DNS=192.168.0.1</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">add line PREFIX=24</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">change BOOTPROTO from dhcp to none</span><br>ifup enp0s3<br>nmcli con show # validate<br></code></pre></div></td></tr></table></figure></li><li><p>Using a manual method (modify file by hand), set the system hostname to rhcsa1.example.com and alias rhcsa1. Make sure the new hostname is reflected in the command prompt:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">vi /etc/hostname<br><span class="hljs-meta prompt_"># </span><span class="language-bash">replace line with rhcsa1.example.com</span><br>vi /etc/hosts<br><span class="hljs-meta prompt_"># </span><span class="language-bash">add rhcsa1.example.com and rhcsa1 to first line</span><br>systemctl restart NetworkManager.service<br>vi ~/.bashrc<br><span class="hljs-meta prompt_"># </span><span class="language-bash">add line <span class="hljs-built_in">export</span> PS1 = &lt;(<span class="hljs-variable">$hostname</span>)&gt;</span><br></code></pre></div></td></tr></table></figure></li><li><p>Set the default boot target to multi-user:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">systemctl set-default multi-user.target<br></code></pre></div></td></tr></table></figure></li><li><p>Set SELinux to permissive mode:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">setenforce permissive<br>sestatus # confirm<br>vi /etc/selinux/config<br><span class="hljs-meta prompt_"># </span><span class="language-bash">change line SELINUX=permissive <span class="hljs-keyword">for</span> permanence</span><br></code></pre></div></td></tr></table></figure></li><li><p>Perform a case-insensitive search for all lines in the <code>/usr/share/dict/linux.words</code> file that begin with the pattern “essential”. Redirect the output to <code>/tmp/pattern.txt</code>. Make sure that empty lines are omitted:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">grep &#x27;^essential&#x27; /usr/share/dict/linux.words &gt; /tmp/pattern.txt<br></code></pre></div></td></tr></table></figure></li><li><p>Change the primary command prompt for the root user to display the hostname, username, and current working directory information in that order. Update the per-user initialisation file for permanence:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">vi /root/.bashrc<br><span class="hljs-meta prompt_"># </span><span class="language-bash">add line <span class="hljs-built_in">export</span> PS1 = <span class="hljs-string">&#x27;&lt;$(whoami) on $(hostname) in $(pwd)&gt;&#x27;</span>$</span><br></code></pre></div></td></tr></table></figure></li><li><p>Create user accounts called user10, user20, and user30. Set their passwords to Temp1234. Make accounts for user10 and user30 to expire on December 31, 2021:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">useradd user10<br>useradd user20<br>useradd user30<br>passwd user10 # enter password<br>passwd user20 # enter password<br>passwd user30 # enter password<br>chage -E 2021-12-31 user10<br>chage -E 2021-12-31 user30<br>chage -l user10 # confirm<br></code></pre></div></td></tr></table></figure></li><li><p>Create a group called group10 and add users user20 and user30 as secondary members:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">groupadd group10<br>usermod -aG group10 user20<br>usermod -aG group10 user30<br>cat /etc/group | grep &quot;group10&quot; # confirm<br></code></pre></div></td></tr></table></figure></li><li><p>Create a user account called user40 with UID 2929. Set the password to user1234:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">useradd -u 2929 user40<br>passwd user40 # enter password<br></code></pre></div></td></tr></table></figure></li><li><p>Create a directory called dir1 under <code>/tmp</code> with ownership and owning groups set to root. Configure default ACLs on the directory and give user user10 read, write, and execute permissions:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">mkdir /tmp/dir1<br>cd /tmp<br><span class="hljs-meta prompt_"># </span><span class="language-bash">tmp already has ownership with root</span><br>setfacl -m u:user10:rwx dir1<br></code></pre></div></td></tr></table></figure></li><li><p>Attach the RHEL 8 ISO image to the VM and mount it persistently to <code>/mnt/cdrom</code>. Define access to both repositories and confirm:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">add ISO to the virtualbox optical drive</span><br>mkdir /mnt/cdrom<br>mount /dev/sr0 /mnt/cdrom<br>vi /etc/yum.repos.d/image.repo<br>blkid /dev/sr0 &gt;&gt; /etc/fstab<br>vi /etc/fstab<br><span class="hljs-meta prompt_"># </span><span class="language-bash">format line with UUID /mnt/cdrom iso9660 defaults 0 0</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">contents of image.repo</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">####</span></span><br>      #[BaseOS]<br><span class="hljs-meta prompt_">#</span><span class="language-bash">name=BaseOS</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">baseurl=file:///mnt/cdrom/BaseOS</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">enabled=1</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">gpgenabled=1</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-redhat-release</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"></span><br><span class="language-bash">      <span class="hljs-comment">#[AppStream]</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">name=AppStream</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">baseurl=file:///mnt/cdrom/AppStream</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">enabled=1</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">gpgenabled=1</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-redhat-release</span><br>      #####<br>yum repolist # confirm<br></code></pre></div></td></tr></table></figure></li><li><p>Create a logical volume called lvol1 of size 300MB in vgtest volume group. Mount the Ext4 file system persistently to <code>/mnt/mnt1</code>:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">mkdir /mnt/mnt1<br><span class="hljs-meta prompt_"># </span><span class="language-bash">/dev/sdb is already 300MB so don<span class="hljs-string">&#x27;t need to worry about partitioning</span></span><br>vgcreate vgtest /dev/sdb<br>lvcreate --name lvol1 -L 296MB vgtest<br>lsblk # confirm<br>mkfs.ext4 /dev/mapper/vgtest-lvol1<br>vi /etc/fstab<br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-string">add line</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-string">/dev/mapper/vgtest-lvol1 /mnt/mnt1 ext4 defaults 0 0</span></span><br>mount -a<br>lsblk # confirm<br></code></pre></div></td></tr></table></figure></li><li><p>Change group membership on <code>/mnt/mnt1</code> to group10. Set read&#x2F;write&#x2F;execute permissions on <code>/mnt/mnt1</code> for group members, and revoke all permissions for public:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">chgrp group10 /mnt/mnt1<br>chmod 770 /mnt/mnt1<br></code></pre></div></td></tr></table></figure></li><li><p>Create a logical volume called lvswap of size 300MB in the vgtest volume group. Initialise the logical volume for swap use. Use the UUID and place an entry for persistence:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">/dev/sdc is already 300MB so don<span class="hljs-string">&#x27;t need to worry about partitioning</span></span><br>vgcreate vgswap /dev/sdc<br>lvcreate --name lvswap -L 296MB vgswap /dev/sdc<br>mkswap /dev/mapper-vgswap-lvswap # UUID returned<br>blkid /dev/sdc &gt;&gt; /etc/fstab<br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-string">organise new line so that it has UUID= swp swap defaults 0 0</span></span><br>swapon -a<br>lsblk # confirm<br></code></pre></div></td></tr></table></figure></li><li><p>Use tar and bzip2 to create a compressed archive of the <code>/etc/sysconfig</code> directory. Store the archive under <code>/tmp</code> as etc.tar.bz2:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">tar -cvzf /tmp/etc.tar.bz2 /etc/sysconfig<br></code></pre></div></td></tr></table></figure></li><li><p>Create a directory hierarchy <code>/dir1/dir2/dir3/dir4</code>, and apply SELinux contexts for <code>/etc</code> on it recursively:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">mkdir -p /dir1/dir2/dir3/dir4<br>ll -Z <br><span class="hljs-meta prompt_"># </span><span class="language-bash">etc shown as system_u:object_r:etc_t:s0</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">dir1 shown as unconfined_u:object_r:default_t:s0</span><br>semanage fcontext -a -t etc_t &quot;/dir1(/.*)?&quot;<br>restorecon -R -v /dir1<br>ll -Z # confirm<br></code></pre></div></td></tr></table></figure></li><li><p>Enable access to the atd service for user20 and deny for user30:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">echo &quot;user30&quot; &gt;&gt; /etc/at.deny<br><span class="hljs-meta prompt_"># </span><span class="language-bash">just don<span class="hljs-string">&#x27;t create at.allow</span></span><br></code></pre></div></td></tr></table></figure></li><li><p>Add a custom message “This is the RHCSA sample exam on $(date) by $LOGNAME” to the <code>/var/log/messages</code> file as the root user. Use regular expression to confirm the message entry to the log file:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">logger &quot;This is the RHCSA sample exam on $(date) by $LOGNAME&quot;<br>grep &quot;This is the&quot; /var/log/messages<br></code></pre></div></td></tr></table></figure></li><li><p>Allow user20 to use sudo without being prompted for their password:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">usermod -aG wheel user20<br><span class="hljs-meta prompt_"># </span><span class="language-bash">still prompts <span class="hljs-keyword">for</span> password, could change the wheel group behaviour or add new line to sudoers</span><br>visudo<br><span class="hljs-meta prompt_"># </span><span class="language-bash">add line at end user20 ALL=(ALL) NOPASSWD: ALL</span><br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>Asghar Ghori - Sample RHCSA Exam 2</p><ul><li><p>Setup a virtual machine RHEL 8 Server for GUI. Add a 10GB disk for the OS and use the default storage partitioning. Add 1 400MB disk. Add a network interface, but do not configure the hostname and network connection.</p></li><li><p>Using the nmcli command, configure a network connection on the primary network device with IP address 192.168.0.242&#x2F;24, gateway 192.168.0.1, and nameserver 192.168.0.1:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">nmcli con add ifname enp0s3 con-name mycon type ethernet ip4 192.168.0.242/24 gw4 192.168.0.1 ipv4.dns &quot;192.168.0.1&quot;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">man nmcli-examples can be referred to <span class="hljs-keyword">if</span> you forget format</span><br>nmcli con show mycon | grep ipv4 # confirm<br></code></pre></div></td></tr></table></figure></li><li><p>Using the hostnamectl command, set the system hostname to rhcsa2.example.com and alias rhcsa2. Make sure that the new hostname is reflected in the command prompt:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">hostnamectl set-hostname rhcsa2.example.com<br>hostnamectl set-hostname --static rhcsa2 # not necessary due to format of FQDN<br><span class="hljs-meta prompt_"># </span><span class="language-bash">the hostname already appears <span class="hljs-keyword">in</span> the <span class="hljs-built_in">command</span> prompt</span><br></code></pre></div></td></tr></table></figure></li><li><p>Create a user account called user70 with UID 7000 and comments “I am user70”. Set the maximum allowable inactivity for this user to 30 days:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">useradd -u 7000 -c &quot;I am user70&quot; user70<br>chage -I 30 user70<br></code></pre></div></td></tr></table></figure></li><li><p>Create a user account called user50 with a non-interactive shell:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">useradd user50 -s /sbin/nologin<br></code></pre></div></td></tr></table></figure></li><li><p>Create a file called testfile1 under <code>/tmp</code> with ownership and owning group set to root. Configure access ACLs on the file and give user10 read and write access. Test access by logging in as user10 and editing the file:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">useradd user10<br>passwd user10 # set password<br>touch /tmp/testfile1<br>cd /tmp<br>setfacl -m u:user10:rw testfile1<br>sudo su user10<br>vi /tmp/testfile1 # can edit the file<br></code></pre></div></td></tr></table></figure></li><li><p>Attach the RHEL 8 ISO image to the VM and mount it persistently to <code>/mnt/dvdrom</code>. Define access to both repositories and confirm:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">mkdir /mnt/dvdrom<br>lsblk # rom is at /dev/sr0<br>mount /dev/sr0 /mnt/dvdrom<br>blkid /dev/sr0 &gt;&gt; /etc/fstab<br>vi /etc/fstab<br><span class="hljs-meta prompt_"># </span><span class="language-bash">format line with UUID /mnt/dvdrom iso9660 defaults 0 0</span><br>vi /etc/yum.repos.d/image.repo<br><span class="hljs-meta prompt_"># </span><span class="language-bash">contents of image.repo</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">####</span></span><br>      #[BaseOS]<br><span class="hljs-meta prompt_">#</span><span class="language-bash">name=BaseOS</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">baseurl=file:///mnt/dvdrom/BaseOS</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">enabled=1</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">gpgenabled=1</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-redhat-release</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"></span><br><span class="language-bash">      <span class="hljs-comment">#[AppStream]</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">name=AppStream</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">baseurl=file:///mnt/dvdrom/AppStream</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">enabled=1</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">gpgenabled=1</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-redhat-release</span><br>      #####<br>yum repolist # confirm<br></code></pre></div></td></tr></table></figure></li><li><p>Create a logical volume called lv1 of size equal to 10 LEs in vg1 volume group (create vg1 with PE size 8MB in a partition on the 400MB disk). Initialise the logical volume with XFS file system type and mount it on <code>/mnt/lvfs1</code>. Create a file called lv1file1 in the mount point. Set the file system to automatically mount at each system reboot:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">parted /dev/sdb<br>mklabel msdos<br>mkpart<br><span class="hljs-meta prompt_"># </span><span class="language-bash">enter primary</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">enter xfs</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">enter 0</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">enter 100MB</span><br>vgcreate vg1 -s 8MB /dev/sdb1<br>lvcreate --name lv1 -l 10 vg1 /dev/sdb1<br>mkfs.xfs /dev/mapper/vg1-lv1<br>mkdir /mnt/lvfs1<br>vi /etc/fstab<br><span class="hljs-meta prompt_"># </span><span class="language-bash">add line <span class="hljs-keyword">for</span> /dev/mapper/vg1-lv1 /mnt/lvfs1 xfs defaults 0 0</span><br>mount -a<br>df -h  # confirm<br>touch /mnt/lvfs1/hi<br></code></pre></div></td></tr></table></figure></li><li><p>Add a group called group20 and change group membership on <code>/mnt/lvfs1</code> to group20. Set read&#x2F;write&#x2F;execute permissions on <code>/mnt/lvfs1</code> for the owner and group members, and no permissions for others:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">groupadd group20<br>chgrp group20 -R /mnt/lvfs1<br>chmod 770 -R /mnt/lvfs1<br></code></pre></div></td></tr></table></figure></li><li><p>Extend the file system in the logical volume lv1 by 64MB without unmounting it and without losing any data:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">lvextend -L +64MB vg1/lv1 /dev/sdb1<br><span class="hljs-meta prompt_"># </span><span class="language-bash">realised that the partition of 100MB isn<span class="hljs-string">&#x27;t enough</span></span><br>parted /dev/sdb<br>resizepart<br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-string">expand partition 1 to 200MB</span></span><br>pvresize /dev/sdb1<br>lvextend -L +64MB vg1/lv1 /dev/sdb1<br></code></pre></div></td></tr></table></figure></li><li><p>Create a swap partition of size 85MB on the 400MB disk. Use its UUID and ensure it is activated after every system reboot:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">parted /dev/sdb<br>mkpart<br><span class="hljs-meta prompt_"># </span><span class="language-bash">enter primary</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">enter linux-swap</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">enter 200MB</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">enter 285MB</span><br>mkswap /dev/sdb2<br>vi /etc/fstab<br><span class="hljs-meta prompt_"># </span><span class="language-bash">add line <span class="hljs-keyword">for</span> UUID swap swap defaults 0 0</span><br>swapon -a<br></code></pre></div></td></tr></table></figure></li><li><p>Create a disk partition of size 100MB on the 400MB disk and format it with Ext4 file system structures. Assign label stdlabel to the file system. Mount the file system on <code>/mnt/stdfs1</code> persistently using the label. Create file stdfile1 in the mount point:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">parted /dev/sdb<br>mkpart<br><span class="hljs-meta prompt_"># </span><span class="language-bash">enter primary</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">enter ext4</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">enter 290MB</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">enter 390MB</span><br>mkfs.ext4 -L stdlabel /dev/sdb3<br>mkdir /mnt/stdfs1<br>vi /etc/fstab<br><span class="hljs-meta prompt_"># </span><span class="language-bash">add line <span class="hljs-keyword">for</span> UUID /mnt/stdfs1 ext4 defaults 0 0</span><br>touch /mnt/stdfs1/hi<br></code></pre></div></td></tr></table></figure></li><li><p>Use tar and gzip to create a compressed archive of the <code>/usr/local</code> directory. Store the archive under <code>/tmp</code> using a filename of your choice:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">tar -czvf /tmp/local.tar.gz /usr/local<br></code></pre></div></td></tr></table></figure></li><li><p>Create a directory <code>/direct01</code> and apply SELinux contexts for <code>/root</code>:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">mkdir /direct01<br>ll -Z<br><span class="hljs-meta prompt_"># </span><span class="language-bash">direct01 has unconfined_u:object_r:default_t:s0</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">root has system_u:object_r:admin_home_t:s0</span><br>semanage fcontext -a -t admin_home_t -s system_u &quot;/direct01(/.*)?&quot; <br>restorecon -R -v /direct01<br>ll -Zrt # confirm<br></code></pre></div></td></tr></table></figure></li><li><p>Set up a cron job for user70 to search for core files in the <code>/var</code> directory and copy them to the directory <code>/tmp/coredir1</code>. This job should run every Monday at 1:20 a.m:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">mkdir /tmp/coredir1<br>crontab -u user70 -e<br>20 1 * * Mon find /var -name core -type f exec cp &#x27;&#123;&#125;&#x27; /tmp/coredir1 \;<br>crontab -u user70 -l # confirm<br></code></pre></div></td></tr></table></figure></li><li><p>Search for all files in the entire directory structure that have been modified in the past 30 days and save the file listing in the <code>/var/tmp/modfiles.txt</code> file:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">find / -mtime -30 &gt;&gt; /var/tmp/modfiles.txt<br></code></pre></div></td></tr></table></figure></li><li><p>Modify the bootloader program and set the default autoboot timer value to 2 seconds:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">vi /etc/default/grub<br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">set</span> GRUB_TIMEOUT=2</span><br>grub2-mkconfig -o /boot/grub2/grub.cfg<br></code></pre></div></td></tr></table></figure></li><li><p>Determine the recommended tuning profile for the system and apply it:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">tuned-adm recommend<br><span class="hljs-meta prompt_"># </span><span class="language-bash">virtual-guest is returned</span><br>tuned-adm active<br><span class="hljs-meta prompt_"># </span><span class="language-bash">virtual-guest is returned</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">no change required</span><br></code></pre></div></td></tr></table></figure></li><li><p>Configure Chrony to synchronise system time with the hardware clock:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">systemctl status chronyd.service<br>vi /etc/chrony.conf<br><span class="hljs-meta prompt_"># </span><span class="language-bash">everything looks alright</span><br></code></pre></div></td></tr></table></figure></li><li><p>Install package group called “Development Tools”, and capture its information in <code>/tmp/systemtools.out</code> file:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">yum grouplist # view available groups<br>yum groupinstall &quot;Development Tools&quot; -y &gt;&gt; /tmp/systemtools.out<br></code></pre></div></td></tr></table></figure></li><li><p>Lock user account user70. Use regular expressions to capture the line that shows the lock and store the output in file <code>/tmp/user70.lock</code>:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">usermod -L user70<br>grep user70 /etc/shadow &gt;&gt; /tmp/user70.lock # observe !<br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>Asghar Ghori - Sample RHCSA Exam 3</p><ul><li><p>Build 2 virtual machines with RHEL 8 Server for GUI. Add a 10GB disk for the OS and use the default storage partitioning. Add 1 4GB disk to VM1 and 2 1GB disks to VM2. Assign a network interface, but do not configure the hostname and network connection.</p></li><li><p>The VirtualBox Network CIDR for the NAT network is 192.168.0.0&#x2F;24.</p></li><li><p>On VM1, set the system hostname to rhcsa3.example.com and alias rhcsa3 using the hostnamectl command. Make sure that the new hostname is reflected in the command prompt:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">hostnamectl set-hostname rhcsa3.example.com<br></code></pre></div></td></tr></table></figure></li><li><p>On rhcsa3, configure a network connection on the primary network device with IP address 192.168.0.243&#x2F;24, gateway 192.168.0.1, and nameserver 192.168.0.1 using the nmcli command:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">nmcli con add type ethernet ifname enp0s3 con-name mycon ip4 192.168.0.243/24 gw4 192.168.0.1 ipv4.dns 192.168.0.1<br></code></pre></div></td></tr></table></figure></li><li><p>On VM2, set the system hostname to rhcsa4.example.com and alias rhcsa4 using a manual method (modify file by hand). Make sure that the new hostname is reflected in the command prompt:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">vi /etc/hostname<br><span class="hljs-meta prompt_"># </span><span class="language-bash">change to rhcsa4.example.com</span><br></code></pre></div></td></tr></table></figure></li><li><p>On rhcsa4, configure a network connection on the primary network device with IP address 192.168.0.244&#x2F;24, gateway 192.168.0.1, and nameserver 192.168.0.1 using a manual method (create&#x2F;modify files by hand):</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">vi /etc/sysconfig/network-scripts/ifcfg-enp0s3<br><span class="hljs-meta prompt_">#</span><span class="language-bash">TYPE=Ethernet</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">BOOTPROTO=static</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">DEFROUTE=<span class="hljs-built_in">yes</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">IPV4_FAILURE_FATAL=no</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">IPV4INIT=no</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">NAME=mycon</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">DEVICE=enp0s3</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">ONBOOT=<span class="hljs-built_in">yes</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">IPADDR=192.168.0.243</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">PREFIX=24</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">GATEWAY=192.168.0.1</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">DNS1=192.168.0.1</span><br>ifup enp0s3<br>nmcli con edit enp0s3 # play around with print ipv4 etc. to confirm settings<br></code></pre></div></td></tr></table></figure></li><li><p>Run “ping -c2 rhcsa4” on rhcsa3. Run “ping -c2 rhcsa3” on rhcsa4. You should see 0% loss in both outputs:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">on rhcsa3</span><br>vi /etc/hosts<br><span class="hljs-meta prompt_"># </span><span class="language-bash">add line 192.168.0.244 rhcsa4</span><br>ping rhcsa3 # confirm<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">on rhcsa4</span><br>vi /etc/hosts<br><span class="hljs-meta prompt_"># </span><span class="language-bash">add line 192.168.0.243 rhcsa3</span><br>ping rhcsa4 # confirm<br></code></pre></div></td></tr></table></figure></li><li><p>On rhcsa3 and rhcsa4, attach the RHEL 8 ISO image to the VM and mount it persistently to <code>/mnt/cdrom</code>. Define access to both repositories and confirm:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">attach disks <span class="hljs-keyword">in</span> VirtualBox</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">on rhcsa3 and rhcsa4</span><br>mkdir /mnt/cdrom<br>mount /dev/sr0 /mnt/cdrom<br>blkid # get UUID<br>vi /etc/fstab<br><span class="hljs-meta prompt_"># </span><span class="language-bash">add line with UUID /mnt/cdrom iso9660 defaults 0 0</span><br>mount -a # confirm<br>vi /etc/yum.repos.d/image.repo<br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">####</span></span><br>      #[BaseOS]<br><span class="hljs-meta prompt_">#</span><span class="language-bash">name=BaseOS</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">baseurl=file:///mnt/cdrom/BaseOS</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">enabled=1</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">gpgenabled=1</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-redhat-release</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"></span><br><span class="language-bash">      <span class="hljs-comment">#[AppStream]</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">name=AppStream</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">baseurl=file:///mnt/cdrom/AppStream</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">enabled=1</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">gpgenabled=1</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-redhat-release</span><br>      #####<br>yum repolist # confirm<br></code></pre></div></td></tr></table></figure></li><li><p>On rhcsa3, add HTTP port 8300&#x2F;tcp to the SELinux policy database:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">semange port -l | grep http # 8300 not in list for http_port_t<br>semanage port -a -t http_port_t -p tcp 8300<br></code></pre></div></td></tr></table></figure></li><li><p>On rhcsa3, create VDO volume vdo1 on the 4GB disk with logical size 16GB and mounted with Ext4 structures on <code>/mnt/vdo1</code>:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">TBC<br></code></pre></div></td></tr></table></figure></li><li><p>Configure NFS service on rhcsa3 and share <code>/rh_share3</code> with rhcsa4. Configure AutoFS direct map on rhcsa4 to mount <code>/rh_share3</code> on <code>/mnt/rh_share4</code>. User user80 (create on both systems) should be able to create files under the share on the NFS server and under the mount point on the NFS client:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">on rhcsa3</span><br>mkdir /rh_share3<br>chmod 777 rh_share3<br>useradd user80<br>passwd user80<br><span class="hljs-meta prompt_"># </span><span class="language-bash">enter Temp1234</span><br>dnf install cifs-utils -y<br>systemctl enable nfs-server.service --now<br>firewall-cmd --add-service=nfs --permanent<br>firewall-cmd --reload<br>vi /etc/exports<br><span class="hljs-meta prompt_"># </span><span class="language-bash">add line rh_share3 rhcsa4(rw)</span><br>exportfs -av<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">on rhcsa4</span><br>useradd user80<br>passwd user80<br><span class="hljs-meta prompt_"># </span><span class="language-bash">enter Temp1234</span><br>mkdir /mnt/rh_share4<br>chmod 777 rh_share4<br><span class="hljs-meta prompt_"># </span><span class="language-bash">mount rhcsa3:/rh_share3 /mnt/nfs</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">mount | grep nfs <span class="hljs-comment"># get details for /etc/fstab</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">vi /etc/fstab</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">add line rhcsa3:/rh_share3 /mnt/rh_share4 nfs4 _netdev 0 0</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">above not required with AutoFS</span><br>dnf install autofs -y<br>vi /etc/auto.master<br><span class="hljs-meta prompt_"># </span><span class="language-bash">add line /mnt/rh_rhcsa3 /etc/auto.master.d/auto.home</span><br>vi /etc/auto.master.d/auto.home<br><span class="hljs-meta prompt_"># </span><span class="language-bash">add line * -rw rhcsa3:/rh_share3</span><br></code></pre></div></td></tr></table></figure></li><li><p>Configure NFS service on rhcsa4 and share the home directory for user user60 (create on both systems) with rhcsa3. Configure AutoFS indirect map on rhcsa3 to automatically mount the home directory under <code>/nfsdir</code> when user60 logs on to rhcsa3:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">on rhcsa3</span><br>useradd user60<br>passwd user60<br><span class="hljs-meta prompt_"># </span><span class="language-bash">enter Temp1234</span><br>dnf install autofs -y<br>mkdir /nfsdir<br>vi /etc/auto.master<br><span class="hljs-meta prompt_"># </span><span class="language-bash">add line <span class="hljs-keyword">for</span> /nfsdir /etc/auto.master.d/auto.home</span><br>vi /etc/auto.master.d/auto.home<br><span class="hljs-meta prompt_"># </span><span class="language-bash">add line <span class="hljs-keyword">for</span> * -rw rhcsa4:/home/user60</span><br>systemctl enable autofs.service --now<br>      <br><span class="hljs-meta prompt_"># </span><span class="language-bash">on rhcsa4</span><br>useradd user60<br>passwd user60<br><span class="hljs-meta prompt_"># </span><span class="language-bash">enter Temp1234</span><br>vi /etc/exports<br><span class="hljs-meta prompt_"># </span><span class="language-bash">add line <span class="hljs-keyword">for</span> /home rhcsa3(rw)</span><br>exportfs -va<br></code></pre></div></td></tr></table></figure></li><li><p>On rhcsa4, create Stratis pool pool1 and volume str1 on a 1GB disk, and mount it to <code>/mnt/str1</code>:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">dnf provides stratis<br>dnf install stratis-cli -y<br>systemctl enable stratisd.service --now<br>stratis pool create pool1 /dev/sdc<br>stratis filesystem create pool1 vol1<br>mkdir /mnt/str1<br>mount /stratis/pool1/vol1 /mnt/str1<br>blkid # get information for /etc/fstab<br>vi /etc/fstab<br><span class="hljs-meta prompt_"># </span><span class="language-bash">add line <span class="hljs-keyword">for</span> UUID /mnt/str1 xfs defaults 0 0</span><br></code></pre></div></td></tr></table></figure></li><li><p>On rhcsa4, expand Stratis pool pool1 using the other 1GB disk. Confirm that <code>/mnt/str1</code> sees the storage expansion:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">stratis pool add-data pool1 /dev/sdb<br>stratis blockdev # extra disk visible<br></code></pre></div></td></tr></table></figure></li><li><p>On rhcsa3, create a group called group30 with GID 3000, and add user60 and user80 to this group. Create a directory called <code>/sdata</code>, enable setgid bit on it, and add write permission bit for the group. Set ownership and owning group to root and group30. Create a file called file1 under <code>/sdata</code> as user user60 and modify the file as user80 successfully:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">TBC<br></code></pre></div></td></tr></table></figure></li><li><p>On rhcsa3, create directory <code>/dir1</code> with full permissions for everyone. Disallow non-owners to remove files. Test by creating file <code>/tmp/dir1/stkfile1</code> as user60 and removing it as user80:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">TBC<br></code></pre></div></td></tr></table></figure></li><li><p>On rhcsa3, search for all manual pages for the description containing the keyword “password” and redirect the output to file <code>/tmp/man.out</code>:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">man -k password &gt;&gt; /tmp.man.out<br><span class="hljs-meta prompt_"># </span><span class="language-bash">or potentially man -wK <span class="hljs-string">&quot;password&quot;</span> <span class="hljs-keyword">if</span> relying on the description is not enough</span><br></code></pre></div></td></tr></table></figure></li><li><p>On rhcsa3, create file lnfile1 under <code>/tmp</code> and create one hard link <code>/tmp/lnfile2</code> and one soft link <code>/boot/file1</code>. Edit lnfile1 using the links and confirm:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">cd /tmp<br>touch lnfile1<br>ln lnfile1 lnfile2<br>ln -s /boot/file1 lnfile1<br></code></pre></div></td></tr></table></figure></li><li><p>On rhcsa3, install module postgresql version 9.6:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">dnf module list postgresql # stream 10 shown as default<br>dnf module install postgresql:9.6<br>dnf module list # stream 9.6 shown as installed<br></code></pre></div></td></tr></table></figure></li><li><p>On rhcsa3, add the http service to the “external” firewalld zone persistently:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">firewall-cmd --zone=external --add-service=http --permanent<br></code></pre></div></td></tr></table></figure></li><li><p>On rhcsa3, set SELinux type shadow_t on a new file testfile1 in <code>/usr</code> and ensure that the context is not affected by a SELinux relabelling:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">cd /usr<br>touch /usr/testfile1<br>ll -Zrt # type shown as unconfined_u:object_r:usr_t:s0<br>semange fcontext -a -t /usr/testfile1<br>restorecon -R -v /usr/testfile1<br></code></pre></div></td></tr></table></figure></li><li><p>Configure password-less ssh access for user60 from rhcsa3 to rhcsa4:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">sudo su - user60<br>ssh-keygen # do not provide a password<br>ssh-copy-id rhcsa4 # enter user60 pasword on rhcsa4<br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>RHCSA 8 Practise Exam</p><ul><li><p>Interrupt the boot process and reset the root password:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">interrupt boot process and add rd.break at end of linux line</span><br>mount -o remount, rw /sysroot<br>chroot /sysroot<br>passwd <br><span class="hljs-meta prompt_"># </span><span class="language-bash">enter new passwd</span><br>touch /.autorelabel<br><span class="hljs-meta prompt_"># </span><span class="language-bash">you could also add enforcing=0 to the end of the Linux line to avoid having to <span class="hljs-keyword">do</span> this</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">ctrl + D</span><br>reboot<br></code></pre></div></td></tr></table></figure></li><li><p>Repos are available from the repo server at <a href="http://repo.eight.example.com/BaseOS">http://repo.eight.example.com/BaseOS</a> and <a href="http://repo.eight.example.com/AppStream">http://repo.eight.example.com/AppStream</a> for you to use during the exam. Setup these repos:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">vi /etc/yum.repos.d/localrepo.repo<br><span class="hljs-meta prompt_">#</span><span class="language-bash">[BaseOS]</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">name=BaseOS</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">baseurl=http://repo.eight.example.com/BaseOS</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">enabled=1</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment">#[AppStream]</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">name=AppStream</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">baseurl=http://repo.eight.example.com/AppStream</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">enabled=1</span><br>dnf repolist # confirm<br><span class="hljs-meta prompt_"># </span><span class="language-bash">you could also use dnf config-manager --add-repo</span><br></code></pre></div></td></tr></table></figure></li><li><p>The system time should be set to your (or nearest to you) timezone and ensure NTP sync is configured:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">timedatectl set-timezone Australia/Sydney<br>timedatectl set-ntp true<br>timedatectl status # confirm status<br></code></pre></div></td></tr></table></figure></li><li><p>Add the following secondary IP addresses statically to your current running interface. Do this in a way that doesn’t compromise your existing settings:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">IPV4 - 10.0.0.5/24</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">IPV6 - fd01::100/64</span><br>nmcli con edit System\ eth0<br>goto ipv4.addresses <br>add 10.0.0.5/24<br>goto ipv6.addresses <br>add fd01::100/64<br>back<br>save<br>nmcli con edit System\ eth1<br>goto ipv4.addresses <br>add 10.0.0.5/24<br>goto ipv6.addresses <br>add fd01::100/64<br>back<br>save<br>nmcli con reload<br><span class="hljs-meta prompt_"># </span><span class="language-bash">enter <span class="hljs-built_in">yes</span> when asked <span class="hljs-keyword">if</span> you want to <span class="hljs-built_in">set</span> to manual</span><br></code></pre></div></td></tr></table></figure></li><li><p>Enable packet forwarding on system1. This should persist after reboot:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">vi /etc/sysctl.conf<br><span class="hljs-meta prompt_"># </span><span class="language-bash">add line <span class="hljs-keyword">for</span> net.ipv4.port_forward=1</span><br></code></pre></div></td></tr></table></figure></li><li><p>System1 should boot into the multiuser target by default and boot messages should be present (not silenced):</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">systemctl set-default multi-user.target<br>vi /etc/default/grub<br><span class="hljs-meta prompt_"># </span><span class="language-bash">remove rhgb quiet from GRUB_CMDLINE_LINUX</span><br>grub2-mkconfig -o /boot/grub2/grub.cfg<br>reboot<br></code></pre></div></td></tr></table></figure></li><li><p>Create a new 2GB volume group named “vgprac”:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">lsblk<br><span class="hljs-meta prompt_"># </span><span class="language-bash">/dev/sdb is available with 8GB</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">the file system already has ~36MB <span class="hljs-keyword">in</span> use and is mounted to /extradisk1</span><br>umount /dev/sdb<br>parted /dev/sdb<br>mklabel<br><span class="hljs-meta prompt_"># </span><span class="language-bash">enter msdos</span><br>mkpart<br><span class="hljs-meta prompt_"># </span><span class="language-bash">enter primary</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">enter xfs</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">enter 0</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">enter 2.1GB</span><br>set<br><span class="hljs-meta prompt_"># </span><span class="language-bash">enter 1</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">enter lvm</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">enter on</span><br>vgcreate vgprac /dev/sdb1<br><span class="hljs-meta prompt_"># </span><span class="language-bash">enter y to wipe</span><br></code></pre></div></td></tr></table></figure></li><li><p>Create a 500MB logical volume named “lvprac” inside the “vgprac” volume group:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">lvcreate --name lvprac -L 500MB vgprac<br></code></pre></div></td></tr></table></figure></li><li><p>The “lvprac” logical volume should be formatted with the xfs filesystem and mount persistently on the <code>/mnt/lvprac</code> directory:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">mkdir /mnt/lvprac<br>mkfs.xfs /dev/mapper/vgprac-lvprac<br>vi /etc/fstab<br><span class="hljs-meta prompt_"># </span><span class="language-bash">comment out line <span class="hljs-keyword">for</span> old /dev/sdb</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">add line <span class="hljs-keyword">for</span> /dev/mapper/vgprac-lvprac</span><br>mount -a<br>df -h # confirm mounted<br></code></pre></div></td></tr></table></figure></li><li><p>Extend the xfs filesystem on “lvprac” by 500MB:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">lvextend -r -L +500MB /dev/vgprac/lvprac<br></code></pre></div></td></tr></table></figure></li><li><p>Use the appropriate utility to create a 5TiB thin provisioned volume:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">lsblk<br><span class="hljs-meta prompt_"># </span><span class="language-bash">/dev/sdc is available with 8GB</span><br>dnf install vdo kmod-vdo -y<br>umount /extradisk2<br>vdo create --name=myvolume --device=/dev/sdc --vdoLogicalSize=5T --force<br>vi /etc/fstab<br><span class="hljs-meta prompt_"># </span><span class="language-bash">comment out line <span class="hljs-keyword">for</span> old /dev/sdc</span><br></code></pre></div></td></tr></table></figure></li><li><p>Configure a basic web server that displays “Welcome to the web server” once connected to it. Ensure the firewall allows the http&#x2F;https services:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">vi /var/www/html/index.html<br><span class="hljs-meta prompt_"># </span><span class="language-bash">add line <span class="hljs-string">&quot;Welcome to the web server&quot;</span></span><br>systemctl restart httpd.service<br>curl http://localhost<br><span class="hljs-meta prompt_"># </span><span class="language-bash">success</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">from server1</span><br>curl http://server2.eight.example.com<br><span class="hljs-meta prompt_"># </span><span class="language-bash">no route to host shown</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">on server2</span><br>firewall-cmd --add-port=80/tcp --permanent<br>firewall-cmd --reload<br><span class="hljs-meta prompt_"># </span><span class="language-bash">from server1</span><br>curl http://server2.eight.example.com<br><span class="hljs-meta prompt_"># </span><span class="language-bash">success</span><br></code></pre></div></td></tr></table></figure></li><li><p>Find all files that are larger than 5MB in the &#x2F;etc directory and copy them to &#x2F;find&#x2F;largefiles:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">mkdir -p /find/largefiles<br>find /etc/ -size +5M -exec cp &#123;&#125; /find/largefiles \;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">the &#123;&#125; is substituted by the output of find, and the ; is mandatory <span class="hljs-keyword">for</span> an <span class="hljs-built_in">exec</span> but must be escaped</span><br></code></pre></div></td></tr></table></figure></li><li><p>Write a script named awesome.sh in the root directory on system1. If “me” is given as an argument, then the script should output “Yes, I’m awesome.” If “them” is given as an argument, then the script should output “Okay, they are awesome.” If the argument is empty or anything else is given, the script should output “Usage .&#x2F;awesome.sh me|them”:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">vi /awesome.sh<br>chmod +x /awesome.sh<br><span class="hljs-meta prompt_"># </span><span class="language-bash">contents of awesome.sh</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-meta">#!/bin/bash</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-keyword">if</span> [ <span class="hljs-variable">$1</span> = <span class="hljs-string">&quot;me&quot;</span> ]; <span class="hljs-keyword">then</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Yes, I&#x27;m awesome.&quot;</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-keyword">elif</span> [ <span class="hljs-variable">$1</span>  = <span class="hljs-string">&quot;them&quot;</span>]; <span class="hljs-keyword">then</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Okay, they are awesome.&quot;</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-keyword">else</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Usage /.awesome.sh me|them&quot;</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-keyword">fi</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">note that = had to be used and not -eq</span><br></code></pre></div></td></tr></table></figure></li><li><p>Create users phil, laura, stewart, and kevin. All new users should have a file named “Welcome” in their home folder after account creation. All user passwords should expire after 60 days and be at least 8 characters in length. Phil and laura should be part of the “accounting” group. If the group doesn’t already exist, create it. Stewart and kevin should be part of the “marketing” group. If the group doesn’t already exist, create it:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">groupadd accounting<br>groupadd marketing<br>vi /etc/security/pwquality.conf<br><span class="hljs-meta prompt_"># </span><span class="language-bash">uncomment out the line that already had minlen = 8</span><br>mkdir /etc/skel/Welcome<br>useradd phil -G accounting<br>useradd laura -G accounting<br>useradd stewart -G marketing<br>useradd kevin -G marketing<br>chage -M 60 phil<br>chage -M 60 laura<br>chage -M 60 stewart<br>chage -M 60 kevin<br>chage -l phil # confirm<br><span class="hljs-meta prompt_"># </span><span class="language-bash">can also change <span class="hljs-keyword">in</span> /etc/login.defs</span><br></code></pre></div></td></tr></table></figure></li><li><p>Only members of the accounting group should have access to the <code>/accounting</code> directory. Make laura the owner of this directory. Make the accounting group the group owner of the <code>/accounting</code> directory:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">mkdir /accounting<br>chmod 770 /accounting<br>chown laura:accounting /accounting<br></code></pre></div></td></tr></table></figure></li><li><p>Only members of the marketing group should have access to the <code>/marketing</code> directory. Make stewart the owner of this directory. Make the marketing group the group owner of the <code>/marketing</code> directory:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">mkdir /marketing<br>chmod 770 /marketing<br>chown stewart:marketing /marketing<br></code></pre></div></td></tr></table></figure></li><li><p>New files should be owned by the group owner and only the file creator should have the permissions to delete their own files:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">chmod +ts /marketing<br>chmod +ts /accounting<br></code></pre></div></td></tr></table></figure></li><li><p>Create a cron job that writes “This practice exam was easy and I’m ready to ace my RHCSA” to <code>/var/log/messages</code> at 12pm only on weekdays:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">crontab -e<br><span class="hljs-meta prompt_">#</span><span class="language-bash">* 12 * * 1-5 <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;This practise exam was easy and I&#x27;m ready to ace my RHCSA&quot;</span> &gt;&gt; /var/log/messagees</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">you can look at info crontab <span class="hljs-keyword">if</span> you forget the syntax</span><br></code></pre></div></td></tr></table></figure></li></ul></li></ol><h2 id="RHCE"><a href="#RHCE" class="headerlink" title="RHCE"></a>RHCE</h2><ul><li><a href="#Understand-core-components-of-Ansible">Understand core components of Ansible</a></li><li><a href="#Install-and-configure-an-Ansible-control-node">Install and configure an Ansible control node</a></li><li><a href="#Configure-Ansible-managed-nodes">Configure Ansible managed nodes</a></li><li><a href="#Script-administration-tasks">Script administration tasks</a></li><li><a href="#Create-Ansible-plays-and-playbooks">Create Ansible plays and playbooks</a></li><li><a href="#Use-Ansible-modules-for-system-administration-tasks-that-work-with">Use Ansible modules for system administration tasks that work with</a></li><li><a href="#Work-with-roles">Work with roles</a></li><li><a href="#Use-advanced-Ansible-features">Use advanced Ansible features</a></li></ul><h3 id="Understand-core-components-of-Ansible"><a href="#Understand-core-components-of-Ansible" class="headerlink" title="Understand core components of Ansible"></a>Understand core components of Ansible</h3><ol><li><p>Inventories</p><ul><li><p>Inventories are what Ansible uses to locate and run against multiple hosts. The default ansible ‘hosts’ file is <code>/etc/ansible/hosts</code>. The default location of the hosts file can be set in <code>/etc/ansible/ansible.cfg</code>.</p></li><li><p>The file can contain individual hosts, groups of hosts, groups of groups, and host and group level variables. It can also contain variables that determine how you connect to a host.</p></li><li><p>An example of an INI-based host inventory file is shown below:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">mail.example.com<br><br>[webservers]<br>web01.example.com<br>web02.example.com<br><br>[dbservers]<br>db[01:04].example.com<br></code></pre></div></td></tr></table></figure></li><li><p>Note that square brackets can be used instead of writing a separate line for each host.</p></li><li><p>An example of a YAML-based host inventory file is shown below:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">all:<br>    hosts:<br>        mail.example.com<br>    children:<br>        webservers:<br>            hosts:<br>                web01.example.com<br>                web02.example.com<br>        dbservers:<br>            hosts:<br>                db[01:04].example.com<br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>Modules</p><ul><li>Modules are essentially tools for particular tasks. They usually take parameters and return JSON. Modules can be run from the command line or within a playbook. Ansible ships with a significant amount of modules by default, and custom modules can also be written.</li></ul></li><li><p>Variables</p><ul><li><p>Variable names should only contain letters, numbers, and underscores. A variable name should also start with a letter. There are three main scopes for variables: Global, Host and Play.</p></li><li><p>Variables are typically used for configuration values and various parameters. They can store the return value of executed commands and may also be dictionaries. Ansible provides a number of predefined variables.</p></li><li><p>An example of INI-based based variables:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">[webservers]<br>host1 http_port=80 maxRequestsPerChild=500<br>host2 http_port=305 maxRequestsPerChild=600<br></code></pre></div></td></tr></table></figure></li><li><p>An example of YAML-based based variables:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">webservers<br>    host1:<br>        http_port: 80<br>        maxRequestsPerChild: 500<br>    host2:<br>        http_port: 305<br>        maxRequestsPerChild: 600<br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>Facts</p><ul><li>Facts provide certain information about a given target host. They are automatically discovered by Ansible when it reaches out to a host. Facts can be disabled and can be cached for use in playbook executions.</li></ul></li><li><p>Plays</p><ul><li>The goal of a play is to map a group of hosts to some well-defined roles. A play can consist of one or more tasks which make calls to Ansible modules.</li></ul></li><li><p>Playbooks</p><ul><li>A playbook is a series of plays. An example of a playbook:  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">---<br>- hosts: webservers<br>  become: yes<br>  tasks:<br>    - name: ensure apache is at the latest version<br>      yum:<br>        name: httpd<br>        state: latest<br>    - name: write our custom apache config file<br>      template:<br>        src: /srv/httpd.j2<br>        dest: /etc/httpd/conf/httpd.conf<br>    - name: ensure that apache is started<br>      service:<br>        name: httpd<br>        state: started<br>    - hosts: dbservers<br>      become: yes<br>      tasks:<br>      - name: ensure postgresql is at the latest version<br>        yum:<br>          name: postgresql<br>          state: latest<br>      - name: ensure that postgres is started<br>        service:<br>          name: postgresql<br>          state: started<br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>Configuration Files</p><ul><li><p>The Ansible configuration files are taken from the below locations in order:</p><ul><li>ANSIBLE_CONFIG (environment variable)</li><li>ansible.cfg (in the current directory)</li><li><code>~/.ansible.cfg</code> (in the home directory)</li><li><code>/etc/ansible/ansible.cfg</code></li></ul></li><li><p>A configuration file will not automatically load if it is in a world-writable directory.</p></li><li><p>The ansible-config command can be used to view configurations:</p><ul><li>list - Prints all configuration options</li><li>dump - Dumps configuration</li><li>view - View the configuration file</li></ul></li><li><p>Commonly used settings:</p><ul><li>inventory - Specifies the default inventory file</li><li>roles_path - Sets paths to search in for roles</li><li>forks - Specifies the amount of hosts configured by Ansible at the same time (Parallelism)</li><li>ansible_managed - Text inserted into templates which indicate that file is managed by Ansible and changes will be overwritten</li></ul></li></ul></li><li><p>Use provided documentation to look up specific information about Ansible modules and commands</p></li></ol><h3 id="Install-and-configure-an-Ansible-control-node"><a href="#Install-and-configure-an-Ansible-control-node" class="headerlink" title="Install and configure an Ansible control node"></a>Install and configure an Ansible control node</h3><ol><li><p>Install required packages</p><ul><li><p>To install Ansible using dnf:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">subscription-manager repos --list | grep ansible<br><span class="hljs-meta prompt_"># </span><span class="language-bash">find latest version</span><br>sudo subscription-manager repos --enable ansible-2.8-for-rhel-8-x86_64-rpms<br>dnf search ansible<br><span class="hljs-meta prompt_"># </span><span class="language-bash">confirm available</span><br>dnf install -y ansible<br></code></pre></div></td></tr></table></figure></li><li><p>To install Ansible from disk:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">sudo dnf install git<br>mkdir ansible<br>mkdir git<br>cd git<br>git clone --single-branch --branch stable -2.8 https://github.com/ansible/ansible.git<br>cd ansible<br>source ./hacking/env-setup<br><span class="hljs-meta prompt_"># </span><span class="language-bash">make permanent</span><br>vi ~/.bash_profile<br><span class="hljs-meta prompt_"># </span><span class="language-bash">add line</span><br>source ~/git/ansible/hacking/env-setup<br>pip2.7 install --user -r ./requirements.txt<br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">test</span> the installation</span><br>ansible 127.0.0.1 -m ping<br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>Create a static host inventory file</p><ul><li><p>An inventory is a list of hosts that Ansible manages. Inventory files may contain hosts, patterns, groups and variables. Multiple inventory files may be specified using a directory. Inventory files may be specified in INI or YAML format.</p></li><li><p>The default location is <code>/etc/ansible/hosts</code>. The location can be set in ansible.cfg or specified in the CLI using:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">ansible -i &lt;filename&gt;<br></code></pre></div></td></tr></table></figure></li><li><p>Best practices for inventory variables:</p><ul><li>Variables should be stored in YAML files located relative to the inventory file.</li><li>Host and group variables should be stored in the host_vars and group_vars directories respectively (the directories need to be created).</li><li>Variable files should be named after the host or group for which they contain variables (files may end in .yml or .yaml).</li></ul></li></ul></li><li><p>Create a configuration file</p><ul><li>An example of creating a custom configuration file, and updating the default configuration file:  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">cd ansible<br>vi ansible.cfg<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## contents of file</span></span><br>[defaults]<br><br>interpreter_python = auto<br>inventory = /home/cloud_user/ansible/inventory/inv.ini<br>roles_path = /etc/ansible/roles:/home/cloud_user/ansible/roles<br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">##</span></span><br><br>mkdir roles<br><span class="hljs-meta prompt_"># </span><span class="language-bash">add property to default ansible.cfg</span><br>sudo vi /etc/ansible/ansible.cfg<br><span class="hljs-meta prompt_"># </span><span class="language-bash">add line</span><br>interpreter_python = auto<br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>Create and use static inventories to define groups of hosts</p></li><li><p>Manage parallelism</p></li></ol><h3 id="Configure-Ansible-managed-nodes"><a href="#Configure-Ansible-managed-nodes" class="headerlink" title="Configure Ansible managed nodes"></a>Configure Ansible managed nodes</h3><ol><li><p>Create and distribute SSH keys to managed nodes</p><ul><li><p>A control node is any machine with Ansible installed. You can run Ansible commands and playbooks from any control node. A managed node (also sometimes called a “host”) is a network device or server you manage with Ansible. Ansible is not installed on managed nodes.</p></li><li><p>The following is an example of generating SSH keys on the control node and distributing them to managed nodes mypearson2c and mypearson3c:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">ssh-keygen<br><span class="hljs-meta prompt_"># </span><span class="language-bash">enter password</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">now we have id.rsa and id_rsa.pub <span class="hljs-keyword">in</span> /home/cloud_user/.ssh/</span><br>ssh-copy-id cloud_user@mspearson2c.mylabserver.com<br><span class="hljs-meta prompt_"># </span><span class="language-bash">enter password</span><br>ssh-copy-id cloud_user@mspearson3c.mylabserver.com<br><span class="hljs-meta prompt_"># </span><span class="language-bash">enter password</span><br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>Configure privilege escalation on managed nodes</p><ul><li>The following is an example of configuring privilege escalation on managed nodes mypearson2c and mypearson3c:  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">perform these steps on both mypearson2c and mypearson3c</span><br>sudo visudo<br><span class="hljs-meta prompt_"># </span><span class="language-bash">add line</span><br>cloud_user ALL=(ALL) NOPASSWD: ALL<br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>Validate a working configuration using ad hoc Ansible commands</p><ul><li><p>An ad hoc command is used to execute one line commands. They are useful for non-routine tasks such as file transfers, package management, managing services, user and group management, fact gathering, general system information, software deployment from Git, and playbook creation testing.</p></li><li><p>The syntax of an ad hoc command is shown below:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">ansible host -i inventory_file -m module -a &quot;arguments&quot;<br></code></pre></div></td></tr></table></figure></li><li><p>Arguments require double quotes and are space delimited, and commands are executed as the user that is running them. The -b option can be used to execute the command as the root user. The -a option may be used without the -m command to run shell commands.</p></li><li><p>Examples of ad hoc commands are shown below:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">an example <span class="hljs-keyword">for</span> the ping module</span><br>ansible -i inventory/inv.ini all -m ping<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">an example <span class="hljs-keyword">for</span> the setup module against the mypearson2 host</span><br>ansible mypearson2 -i inventory/inv.ini all -m setup<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">an example of a shell <span class="hljs-built_in">command</span> against the mypearson2 host</span><br>ansible mspearson2 -a &quot;ls -l /tmp&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">an example of a shell <span class="hljs-built_in">command</span> against the labservers group</span><br>ansible labservers -a &quot;ls -l /tmp&quot;<br></code></pre></div></td></tr></table></figure></li></ul></li></ol><h3 id="Script-administration-tasks"><a href="#Script-administration-tasks" class="headerlink" title="Script administration tasks"></a>Script administration tasks</h3><ol><li><p>Create simple shell scripts</p><ul><li><p>The first line of a shell script must include <code>#!/bin/bash</code>. Comments can be added by using the # symbol. Execute permissions are required on the script before it can be executed. The script can be executed using the absolute or relative path.</p></li><li><p>A sample shell script is shown below:</p> <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">hello world script</span><br>echo &quot;Hello world!&quot;<br></code></pre></div></td></tr></table></figure></li><li><p>A sample shell script using a for loop is shown below:</p> <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-keyword">for</span> loop</span><br>for i in &#123;1..5&#125;<br>do<br>echo &quot;Hello $i times!&quot;<br>done<br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>Create simple shell scripts that run ad hoc Ansible commands</p><ul><li><p>A script containing adhoc commands is shown below:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Create the user matt</span><br>ansible mcpearson3c.mylabserver.com -i /home/cloud_user/ansible/inventory/inv.ini -b -m user -a &quot;name=matt&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Create the demo directory <span class="hljs-keyword">in</span> matt<span class="hljs-string">&#x27;s home directory</span></span><br>ansible mspearson3c.mylabserver.com -i /home/cloud_user/ansible/inventory/inv.ini -b -m file -a &quot;path=/home/matt/demo state=directory owner=matt group=matt mode=0755&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-string">Copy testFile to matt&#x27;</span>s home directory</span><br>ansible mspearson3c.mylabserver.com -i /home/cloud_user/ansible/inventory/inv.ini -b -m copy -a &quot;src=/home/cloud_user/ansible/testFile dest=/home/matt/testFile mode=0644 owner=matt group=matt&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Install httpd to the webservers group and start and <span class="hljs-built_in">enable</span> the httpd service</span><br>ansible webservers -i /home/cloud_user/ansible/inventory/inv.ini -b -m yum -a &quot;name=httpd state=latest&quot;<br>ansible webservers -i /home/cloud_user/ansible/inventory/inv.ini -b -m service -a &quot;name=httpd state=started enabled=yes&quot;<br></code></pre></div></td></tr></table></figure></li><li><p>Ad hoc commands can be a powerful tool for running commands across an inventory and getting the desired results. The following example can be run on a host to retrieve log files from multiple managed nodes:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br><br>for i in webserver1 dbserver1 adminserver1;<br> do ssh ansible@$i &quot;sudo tar -czf messages.tar.gz /var/log/messages&quot;;<br>done<br>ansible -m fetch -a &quot;src=/home/ansible/messages.tar.gz dest=/tmp/messages&quot; all<br></code></pre></div></td></tr></table></figure></li></ul></li></ol><h3 id="Create-Ansible-plays-and-playbooks"><a href="#Create-Ansible-plays-and-playbooks" class="headerlink" title="Create Ansible plays and playbooks"></a>Create Ansible plays and playbooks</h3><ol><li><p>Know how to work with commonly used Ansible modules</p><ul><li>Commonly used modules include:<ul><li>Ping<ul><li>Validates a server is running and reachable.</li><li>No required parameters.</li></ul></li><li>Setup<ul><li>Gather Ansible facts.</li><li>No required parameters.</li></ul></li><li>Yum<ul><li>Manage packages with the YUM package manager.</li><li>Common parameters are name and state.</li></ul></li><li>Service<ul><li>Control services on remote hosts:</li><li>Common parameters are name (required), state and enabled.</li></ul></li><li>User<ul><li>Manage user accounts and attributes.</li><li>Common parameters are name (required), state, group and groups.</li></ul></li><li>Copy<ul><li>Copy files to a remote host.</li><li>Common parameters are src, dest (required), owner, group and mode.</li></ul></li><li>File<ul><li>Manage files and directories.</li><li>Common parameters are path (required), state, owner, group and mode.</li></ul></li><li>Git<ul><li>Interact with git repositories.</li><li>Common parameters are repo (required), dest (required) and clone.</li></ul></li></ul></li></ul></li><li><p>Use variables to retrieve the results of running a command</p><ul><li><p>The register keyword is used to store the results of running a command as a variable. Variables can then be referenced by other tasks in the playbook. Registered variables are only valid on the host for the current playbook run. The return values differ from module to module.</p></li><li><p>A sample playbook register.yml is shown below:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">---<br>- hosts: mspearson2<br>  tasks:<br>    - name: create a file<br>      file:<br>        path: /tmp/testFile<br>        state: touch<br>      register: var<br>    - name: display debug msg<br>      debug: msg=&quot;Register output is &#123;&#123; var &#125;&#125;&quot;<br>    - name: edit file<br>      lineinfile:<br>        path: /tmp/testFile<br>        line: &quot;The uid is &#123;&#123; var.uid &#125;&#125; and gid is &#123;&#123; var.gid &#125;&#125;&quot;<br></code></pre></div></td></tr></table></figure></li><li><p>This playbook is run using:</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">ansible-playbook playbooks/register.yml<br></code></pre></div></td></tr></table></figure></li><li><p>The result stored in <code>/tmp/testFile</code> shows the variables for uid and gid.</p></li></ul></li><li><p>Use conditionals to control play execution</p></li><li><p>Configure error handling</p></li><li><p>Create playbooks to configure systems to a specified state</p></li></ol><h3 id="Use-Ansible-modules-for-system-administration-tasks-that-work-with"><a href="#Use-Ansible-modules-for-system-administration-tasks-that-work-with" class="headerlink" title="Use Ansible modules for system administration tasks that work with"></a>Use Ansible modules for system administration tasks that work with</h3><ol><li><p>Software packages and repositories</p></li><li><p>Services</p></li><li><p>Firewall rules</p></li><li><p>File systems</p></li><li><p>Storage devices</p></li><li><p>File content</p></li><li><p>Archiving</p></li><li><p>Scheduled tasks</p></li><li><p>Security</p></li><li><p>Users and groups</p></li></ol><h3 id="Work-with-roles"><a href="#Work-with-roles" class="headerlink" title="Work with roles"></a>Work with roles</h3><ol><li><p>Create roles</p></li><li><p>Download roles from an Ansible Galaxy and use them</p></li></ol><h3 id="Use-advanced-Ansible-features"><a href="#Use-advanced-Ansible-features" class="headerlink" title="Use advanced Ansible features"></a>Use advanced Ansible features</h3><ol><li><p>Create and use templates to create customized configuration files</p></li><li><p>Use Ansible Vault in playbooks to protect sensitive data</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>红帽</tag>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/03/26/hello-world/"/>
    <url>/2022/03/26/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;network-123&quot;</span><br></code></pre></div></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ hexo server<br></code></pre></div></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ hexo generate<br></code></pre></div></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></div></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
